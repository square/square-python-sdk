# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.pagination import AsyncPager, SyncPager
from ...core.request_options import RequestOptions
from ...types.delete_dispute_evidence_response import DeleteDisputeEvidenceResponse
from ...types.dispute_evidence import DisputeEvidence
from ...types.get_dispute_evidence_response import GetDisputeEvidenceResponse
from .raw_client import AsyncRawEvidenceClient, RawEvidenceClient


class EvidenceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEvidenceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEvidenceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEvidenceClient
        """
        return self._raw_client

    def list(
        self,
        dispute_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[DisputeEvidence]:
        """
        Returns a list of evidence associated with a dispute.

        Parameters
        ----------
        dispute_id : str
            The ID of the dispute.

        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to this endpoint.
            Provide this cursor to retrieve the next set of results for the original query.
            For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[DisputeEvidence]
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        response = client.disputes.evidence.list(
            dispute_id="dispute_id",
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.list(dispute_id, cursor=cursor, request_options=request_options)

    def get(
        self, dispute_id: str, evidence_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetDisputeEvidenceResponse:
        """
        Returns the metadata for the evidence specified in the request URL path.

        You must maintain a copy of any evidence uploaded if you want to reference it later. Evidence cannot be downloaded after you upload it.

        Parameters
        ----------
        dispute_id : str
            The ID of the dispute from which you want to retrieve evidence metadata.

        evidence_id : str
            The ID of the evidence to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDisputeEvidenceResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.disputes.evidence.get(
            dispute_id="dispute_id",
            evidence_id="evidence_id",
        )
        """
        _response = self._raw_client.get(dispute_id, evidence_id, request_options=request_options)
        return _response.data

    def delete(
        self, dispute_id: str, evidence_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteDisputeEvidenceResponse:
        """
        Removes specified evidence from a dispute.
        Square does not send the bank any evidence that is removed.

        Parameters
        ----------
        dispute_id : str
            The ID of the dispute from which you want to remove evidence.

        evidence_id : str
            The ID of the evidence you want to remove.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteDisputeEvidenceResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.disputes.evidence.delete(
            dispute_id="dispute_id",
            evidence_id="evidence_id",
        )
        """
        _response = self._raw_client.delete(dispute_id, evidence_id, request_options=request_options)
        return _response.data


class AsyncEvidenceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEvidenceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEvidenceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEvidenceClient
        """
        return self._raw_client

    async def list(
        self,
        dispute_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[DisputeEvidence]:
        """
        Returns a list of evidence associated with a dispute.

        Parameters
        ----------
        dispute_id : str
            The ID of the dispute.

        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to this endpoint.
            Provide this cursor to retrieve the next set of results for the original query.
            For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[DisputeEvidence]
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.disputes.evidence.list(
                dispute_id="dispute_id",
            )
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        return await self._raw_client.list(dispute_id, cursor=cursor, request_options=request_options)

    async def get(
        self, dispute_id: str, evidence_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetDisputeEvidenceResponse:
        """
        Returns the metadata for the evidence specified in the request URL path.

        You must maintain a copy of any evidence uploaded if you want to reference it later. Evidence cannot be downloaded after you upload it.

        Parameters
        ----------
        dispute_id : str
            The ID of the dispute from which you want to retrieve evidence metadata.

        evidence_id : str
            The ID of the evidence to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDisputeEvidenceResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.disputes.evidence.get(
                dispute_id="dispute_id",
                evidence_id="evidence_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(dispute_id, evidence_id, request_options=request_options)
        return _response.data

    async def delete(
        self, dispute_id: str, evidence_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteDisputeEvidenceResponse:
        """
        Removes specified evidence from a dispute.
        Square does not send the bank any evidence that is removed.

        Parameters
        ----------
        dispute_id : str
            The ID of the dispute from which you want to remove evidence.

        evidence_id : str
            The ID of the evidence you want to remove.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteDisputeEvidenceResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.disputes.evidence.delete(
                dispute_id="dispute_id",
                evidence_id="evidence_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(dispute_id, evidence_id, request_options=request_options)
        return _response.data
