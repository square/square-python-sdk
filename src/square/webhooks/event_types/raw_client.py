# This file was auto-generated by Fern from our API Definition.

from ...core.client_wrapper import SyncClientWrapper
import typing
from ...core.request_options import RequestOptions
from ...core.http_response import HttpResponse
from ...types.list_webhook_event_types_response import ListWebhookEventTypesResponse
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper
from ...core.http_response import AsyncHttpResponse


class RawEventTypesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, *, api_version: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[ListWebhookEventTypesResponse]:
        """
        Lists all webhook event types that can be subscribed to.

        Parameters
        ----------
        api_version : typing.Optional[str]
            The API version for which to list event types. Setting this field overrides the default version used by the application.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ListWebhookEventTypesResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/webhooks/event-types",
            method="GET",
            params={
                "api_version": api_version,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListWebhookEventTypesResponse,
                    construct_type(
                        type_=ListWebhookEventTypesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawEventTypesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, api_version: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[ListWebhookEventTypesResponse]:
        """
        Lists all webhook event types that can be subscribed to.

        Parameters
        ----------
        api_version : typing.Optional[str]
            The API version for which to list event types. Setting this field overrides the default version used by the application.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ListWebhookEventTypesResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/webhooks/event-types",
            method="GET",
            params={
                "api_version": api_version,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListWebhookEventTypesResponse,
                    construct_type(
                        type_=ListWebhookEventTypesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
