# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .tax_calculation_phase import TaxCalculationPhase
from .tax_inclusion_type import TaxInclusionType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CatalogTax(UncheckedBaseModel):
    """
    A tax applicable to an item.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
    """

    calculation_phase: typing.Optional[TaxCalculationPhase] = pydantic.Field(default=None)
    """
    Whether the tax is calculated based on a payment's subtotal or total.
    See [TaxCalculationPhase](#type-taxcalculationphase) for possible values
    """

    inclusion_type: typing.Optional[TaxInclusionType] = pydantic.Field(default=None)
    """
    Whether the tax is `ADDITIVE` or `INCLUSIVE`.
    See [TaxInclusionType](#type-taxinclusiontype) for possible values
    """

    percentage: typing.Optional[str] = pydantic.Field(default=None)
    """
    The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.
    A value of `7.5` corresponds to 7.5%. For a location-specific tax rate, contact the tax authority of the location or a tax consultant.
    """

    applies_to_custom_amounts: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If `true`, the fee applies to custom amounts entered into the Square Point of Sale
    app that are not associated with a particular `CatalogItem`.
    """

    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`).
    """

    applies_to_product_set_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of a `CatalogProductSet` object. If set, the tax is applicable to all products in the product set.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
