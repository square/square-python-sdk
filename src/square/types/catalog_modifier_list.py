# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.unchecked_base_model import UncheckedBaseModel
from .catalog_category import CatalogCategory
from .catalog_object_category import CatalogObjectCategory
import typing
import pydantic
from .catalog_modifier_list_selection_type import CatalogModifierListSelectionType
from .catalog_modifier_list_modifier_type import CatalogModifierListModifierType
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.pydantic_utilities import update_forward_refs


class CatalogModifierList(UncheckedBaseModel):
    """
    For a text-based modifier, this encapsulates the modifier's text when its `modifier_type` is `TEXT`.
    For example, to sell T-shirts with custom prints, a text-based modifier can be used to capture the buyer-supplied
    text string to be selected for the T-shirt at the time of sale.

    For non text-based modifiers, this encapsulates a non-empty list of modifiers applicable to items
    at the time of sale. Each element of the modifier list is a `CatalogObject` instance of the `MODIFIER` type.
    For example, a "Condiments" modifier list applicable to a "Hot Dog" item
    may contain "Ketchup", "Mustard", and "Relish" modifiers.

    A non text-based modifier can be applied to the modified item once or multiple times, if the `selection_type` field
    is set to `SINGLE` or `MULTIPLE`, respectively. On the other hand, a text-based modifier can be applied to the item
    only once and the `selection_type` field is always set to `SINGLE`.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of 
    Unicode code points.
    """

    ordinal: typing.Optional[int] = pydantic.Field(default=None)
    """
    The position of this `CatalogModifierList` within a list of `CatalogModifierList` instances.
    """

    selection_type: typing.Optional[CatalogModifierListSelectionType] = pydantic.Field(default=None)
    """
    Indicates whether a single (`SINGLE`) or multiple (`MULTIPLE`) modifiers from the list
    can be applied to a single `CatalogItem`.
    
    For text-based modifiers, the `selection_type` attribute is always `SINGLE`. The other value is ignored.
    See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values
    """

    modifiers: typing.Optional[typing.List["CatalogObject"]] = pydantic.Field(default=None)
    """
    A non-empty list of `CatalogModifier` objects to be included in the `CatalogModifierList`, 
    for non text-based modifiers when the `modifier_type` attribute is `LIST`. Each element of this list 
    is a `CatalogObject` instance of the `MODIFIER` type, containing the following attributes:
    ```
    {
    "id": "{{catalog_modifier_id}}",
    "type": "MODIFIER", 
    "modifier_data": {{a CatalogModifier instance>}} 
    }
    ```
    """

    image_ids: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The IDs of images associated with this `CatalogModifierList` instance.
    Currently these images are not displayed on Square products, but may be displayed in 3rd-party applications.
    """

    modifier_type: typing.Optional[CatalogModifierListModifierType] = pydantic.Field(default=None)
    """
    The type of the modifier. 
    
    When this `modifier_type` value is `TEXT`,  the `CatalogModifierList` represents a text-based modifier. 
    When this `modifier_type` value is `LIST`, the `CatalogModifierList` contains a list of `CatalogModifier` objects.
    See [CatalogModifierListModifierType](#type-catalogmodifierlistmodifiertype) for possible values
    """

    max_length: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum length, in Unicode points, of the text string of the text-based modifier as represented by 
    this `CatalogModifierList` object with the `modifier_type` set to `TEXT`.
    """

    text_required: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the text string must be a non-empty string (`true`) or not (`false`) for a text-based modifier
    as represented by this `CatalogModifierList` object with the `modifier_type` set to `TEXT`.
    """

    internal_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    A note for internal use by the business.   
    
    For example, for a text-based modifier applied to a T-shirt item, if the buyer-supplied text of "Hello, Kitty!"  
    is to be printed on the T-shirt, this `internal_name` attribute can be "Use italic face" as 
    an instruction for the business to follow.  
    
    For non text-based modifiers, this `internal_name` attribute can be 
    used to include SKUs, internal codes, or supplemental descriptions for internal use.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .catalog_item import CatalogItem  # noqa: E402
from .catalog_item_option import CatalogItemOption  # noqa: E402
from .catalog_object_item import CatalogObjectItem  # noqa: E402
from .catalog_object_item_option import CatalogObjectItemOption  # noqa: E402
from .catalog_object_modifier_list import CatalogObjectModifierList  # noqa: E402
from .catalog_object_subscription_plan import CatalogObjectSubscriptionPlan  # noqa: E402
from .catalog_subscription_plan import CatalogSubscriptionPlan  # noqa: E402
from .catalog_object import CatalogObject  # noqa: E402

update_forward_refs(CatalogModifierList)
