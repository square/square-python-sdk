# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .business_appointment_settings_booking_location_type import BusinessAppointmentSettingsBookingLocationType
import pydantic
from .business_appointment_settings_alignment_time import BusinessAppointmentSettingsAlignmentTime
from .business_appointment_settings_max_appointments_per_day_limit_type import (
    BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType,
)
from .money import Money
from .business_appointment_settings_cancellation_policy import BusinessAppointmentSettingsCancellationPolicy
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BusinessAppointmentSettings(UncheckedBaseModel):
    """
    The service appointment settings, including where and how the service is provided.
    """

    location_types: typing.Optional[typing.List[BusinessAppointmentSettingsBookingLocationType]] = pydantic.Field(
        default=None
    )
    """
    Types of the location allowed for bookings.
    See [BusinessAppointmentSettingsBookingLocationType](#type-businessappointmentsettingsbookinglocationtype) for possible values
    """

    alignment_time: typing.Optional[BusinessAppointmentSettingsAlignmentTime] = pydantic.Field(default=None)
    """
    The time unit of the service duration for bookings.
    See [BusinessAppointmentSettingsAlignmentTime](#type-businessappointmentsettingsalignmenttime) for possible values
    """

    min_booking_lead_time_seconds: typing.Optional[int] = pydantic.Field(default=None)
    """
    The minimum lead time in seconds before a service can be booked. A booking must be created at least this amount of time before its starting time.
    """

    max_booking_lead_time_seconds: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum lead time in seconds before a service can be booked. A booking must be created at most this amount of time before its starting time.
    """

    any_team_member_booking_enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether a customer can choose from all available time slots and have a staff member assigned
    automatically (`true`) or not (`false`).
    """

    multiple_service_booking_enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether a customer can book multiple services in a single online booking.
    """

    max_appointments_per_day_limit_type: typing.Optional[BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType] = (
        pydantic.Field(default=None)
    )
    """
    Indicates whether the daily appointment limit applies to team members or to
    business locations.
    See [BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType](#type-businessappointmentsettingsmaxappointmentsperdaylimittype) for possible values
    """

    max_appointments_per_day_limit: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum number of daily appointments per team member or per location.
    """

    cancellation_window_seconds: typing.Optional[int] = pydantic.Field(default=None)
    """
    The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.
    """

    cancellation_fee_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The flat-fee amount charged for a no-show booking.
    """

    cancellation_policy: typing.Optional[BusinessAppointmentSettingsCancellationPolicy] = pydantic.Field(default=None)
    """
    The cancellation policy adopted by the seller.
    See [BusinessAppointmentSettingsCancellationPolicy](#type-businessappointmentsettingscancellationpolicy) for possible values
    """

    cancellation_policy_text: typing.Optional[str] = pydantic.Field(default=None)
    """
    The free-form text of the seller's cancellation policy.
    """

    skip_booking_flow_staff_selection: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
