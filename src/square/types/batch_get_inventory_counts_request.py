# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .inventory_state import InventoryState
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BatchGetInventoryCountsRequest(UncheckedBaseModel):
    catalog_object_ids: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The filter to return results by `CatalogObject` ID.
    The filter is applicable only when set.  The default is null.
    """

    location_ids: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The filter to return results by `Location` ID.
    This filter is applicable only when set. The default is null.
    """

    updated_after: typing.Optional[str] = pydantic.Field(default=None)
    """
    The filter to return results with their `calculated_at` value
    after the given time as specified in an RFC 3339 timestamp.
    The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
    """

    cursor: typing.Optional[str] = pydantic.Field(default=None)
    """
    A pagination cursor returned by a previous call to this endpoint.
    Provide this to retrieve the next set of results for the original query.
    
    See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    """

    states: typing.Optional[typing.List[InventoryState]] = pydantic.Field(default=None)
    """
    The filter to return results by `InventoryState`. The filter is only applicable when set.
    Ignored are untracked states of `NONE`, `SOLD`, and `UNLINKED_RETURN`.
    The default is null.
    """

    limit: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of [records](entity:InventoryCount) to return.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
