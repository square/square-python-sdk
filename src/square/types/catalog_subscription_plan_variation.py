# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import pydantic
import typing
from .subscription_phase import SubscriptionPhase
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CatalogSubscriptionPlanVariation(UncheckedBaseModel):
    """
    Describes a subscription plan variation. A subscription plan variation represents how the subscription for a product or service is sold.
    For more information, see [Subscription Plans and Variations](https://developer.squareup.com/docs/subscriptions-api/plans-and-variations).
    """

    name: str = pydantic.Field()
    """
    The name of the plan variation.
    """

    phases: typing.List[SubscriptionPhase] = pydantic.Field()
    """
    A list containing each [SubscriptionPhase](entity:SubscriptionPhase) for this plan variation.
    """

    subscription_plan_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The id of the subscription plan, if there is one.
    """

    monthly_billing_anchor_date: typing.Optional[int] = pydantic.Field(default=None)
    """
    The day of the month the billing period starts.
    """

    can_prorate: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether bills for this plan variation can be split for proration.
    """

    successor_plan_variation_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of a "successor" plan variation to this one. If the field is set, and this object is disabled at all
    locations, it indicates that this variation is deprecated and the object identified by the successor ID be used in
    its stead.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
