# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .booking_created_event_data import BookingCreatedEventData
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BookingCreatedEvent(UncheckedBaseModel):
    """
    Published when a booking is created.

    To receive this event with buyer-level permissions, you must have `APPOINTMENTS_READ` set for the OAuth scope.
    To receive this event with seller-level permissions, you must have `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` set for the OAuth scope.
    """

    merchant_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the target seller associated with the event.
    """

    type: typing.Optional[str] = pydantic.Field(default=None)
    """
    The type of this event. The value is `"booking.created"`.
    """

    event_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    A unique ID for the event.
    """

    created_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    The timestamp of when the event was created, in RFC 3339 format.
    """

    data: typing.Optional[BookingCreatedEventData] = pydantic.Field(default=None)
    """
    The data associated with the event.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
