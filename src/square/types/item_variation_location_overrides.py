# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .money import Money
from .catalog_pricing_type import CatalogPricingType
from .inventory_alert_type import InventoryAlertType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ItemVariationLocationOverrides(UncheckedBaseModel):
    """
    Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`.
    """

    location_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the `Location`. This can include locations that are deactivated.
    """

    price_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The price of the `CatalogItemVariation` at the given `Location`, or blank for variable pricing.
    """

    pricing_type: typing.Optional[CatalogPricingType] = pydantic.Field(default=None)
    """
    The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`.
    See [CatalogPricingType](#type-catalogpricingtype) for possible values
    """

    track_inventory: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`.
    """

    inventory_alert_type: typing.Optional[InventoryAlertType] = pydantic.Field(default=None)
    """
    Indicates whether the `CatalogItemVariation` displays an alert when its inventory
    quantity is less than or equal to its `inventory_alert_threshold`.
    See [InventoryAlertType](#type-inventoryalerttype) for possible values
    """

    inventory_alert_threshold: typing.Optional[int] = pydantic.Field(default=None)
    """
    If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
    is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
    
    This value is always an integer.
    """

    sold_out: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the overridden item variation is sold out at the specified location.
    
    When inventory tracking is enabled on the item variation either globally or at the specified location,
    the item variation is automatically marked as sold out when its inventory count reaches zero. The seller
    can manually set the item variation as sold out even when the inventory count is greater than zero.
    Attempts by an application to set this attribute are ignored. Regardless how the sold-out status is set,
    applications should treat its inventory count as zero when this attribute value is `true`.
    """

    sold_out_valid_until: typing.Optional[str] = pydantic.Field(default=None)
    """
    The seller-assigned timestamp, of the RFC 3339 format, to indicate when this sold-out variation
    becomes available again at the specified location. Attempts by an application to set this attribute are ignored.
    When the current time is later than this attribute value, the affected item variation is no longer sold out.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
