# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .card_brand import CardBrand
import typing_extensions
from ..core.serialization import FieldMetadata
from .address import Address
from .card_type import CardType
from .card_prepaid_type import CardPrepaidType
from .card_co_brand import CardCoBrand
from .card_issuer_alert import CardIssuerAlert
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Card(UncheckedBaseModel):
    """
    Represents the payment details of a card to be used for payments. These
    details are determined by the payment token generated by Web Payments SDK.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique ID for this card. Generated by Square.
    """

    card_brand: typing.Optional[CardBrand] = pydantic.Field(default=None)
    """
    The card's brand.
    See [CardBrand](#type-cardbrand) for possible values
    """

    last4: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="last_4")] = pydantic.Field(
        default=None
    )
    """
    The last 4 digits of the card number.
    """

    exp_month: typing.Optional[int] = pydantic.Field(default=None)
    """
    The expiration month of the associated card as an integer between 1 and 12.
    """

    exp_year: typing.Optional[int] = pydantic.Field(default=None)
    """
    The four-digit year of the card's expiration date.
    """

    cardholder_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the cardholder.
    """

    billing_address: typing.Optional[Address] = pydantic.Field(default=None)
    """
    The billing address for this card. `US` postal codes can be provided as a 5-digit zip code
    or 9-digit ZIP+4 (example: `12345-6789`). For a full list of field meanings by country, see
    [Working with Addresses](https://developer.squareup.com/docs/build-basics/common-data-types/working-with-addresses).
    """

    fingerprint: typing.Optional[str] = pydantic.Field(default=None)
    """
    Intended as a Square-assigned identifier, based
    on the card number, to identify the card across multiple locations within a
    single application.
    """

    customer_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    **Required** The ID of a [customer](entity:Customer) to be associated with the card.
    """

    merchant_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the merchant associated with the card.
    """

    reference_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    An optional user-defined reference ID that associates this card with
    another entity in an external system. For example, a customer ID from an
    external customer management system.
    """

    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether or not a card can be used for payments.
    """

    card_type: typing.Optional[CardType] = pydantic.Field(default=None)
    """
    The type of the card.
    The Card object includes this field only in response to Payments API calls.
    See [CardType](#type-cardtype) for possible values
    """

    prepaid_type: typing.Optional[CardPrepaidType] = pydantic.Field(default=None)
    """
    Indicates whether the card is prepaid or not.
    See [CardPrepaidType](#type-cardprepaidtype) for possible values
    """

    bin: typing.Optional[str] = pydantic.Field(default=None)
    """
    The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
    returns this field.
    """

    version: typing.Optional[int] = pydantic.Field(default=None)
    """
    Current version number of the card. Increments with each card update. Requests to update an
    existing Card object will be rejected unless the version in the request matches the current
    version for the Card.
    """

    card_co_brand: typing.Optional[CardCoBrand] = pydantic.Field(default=None)
    """
    The card's co-brand if available. For example, an Afterpay virtual card would have a
    co-brand of AFTERPAY.
    See [CardCoBrand](#type-cardcobrand) for possible values
    """

    issuer_alert: typing.Optional[CardIssuerAlert] = pydantic.Field(default=None)
    """
    An alert from the issuing bank about the card status. Alerts can indicate whether
    future charges to the card are likely to fail. For more information, see
    [Manage Card on File Declines](https://developer.squareup.com/docs/cards-api/manage-card-on-file-declines).
    
    This field is present only if there's an active issuer alert.
    See [IssuerAlert](#type-issueralert) for possible values
    """

    issuer_alert_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    The timestamp of when the current issuer alert was received and processed, in
    RFC 3339 format.
    
    This field is present only if there's an active issuer alert.
    """

    hsa_fsa: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the card is linked to a Health Savings Account (HSA) or Flexible
    Spending Account (FSA), based on the card BIN.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
