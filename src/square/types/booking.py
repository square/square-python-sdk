# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .booking_status import BookingStatus
from .appointment_segment import AppointmentSegment
from .business_appointment_settings_booking_location_type import BusinessAppointmentSettingsBookingLocationType
from .booking_creator_details import BookingCreatorDetails
from .booking_booking_source import BookingBookingSource
from .address import Address
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Booking(UncheckedBaseModel):
    """
    Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
    at a given location to a requesting customer in one or more appointment segments.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    A unique ID of this object representing a booking.
    """

    version: typing.Optional[int] = pydantic.Field(default=None)
    """
    The revision number for the booking used for optimistic concurrency.
    """

    status: typing.Optional[BookingStatus] = pydantic.Field(default=None)
    """
    The status of the booking, describing where the booking stands with respect to the booking state machine.
    See [BookingStatus](#type-bookingstatus) for possible values
    """

    created_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    The RFC 3339 timestamp specifying the creation time of this booking.
    """

    updated_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    The RFC 3339 timestamp specifying the most recent update time of this booking.
    """

    start_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    The RFC 3339 timestamp specifying the starting time of this booking.
    """

    location_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the [Location](entity:Location) object representing the location where the booked service is provided. Once set when the booking is created, its value cannot be changed.
    """

    customer_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the [Customer](entity:Customer) object representing the customer receiving the booked service.
    """

    customer_note: typing.Optional[str] = pydantic.Field(default=None)
    """
    The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](entity:CatalogObject) instance.
    """

    seller_note: typing.Optional[str] = pydantic.Field(default=None)
    """
    The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](entity:CatalogObject) instance.
    This field should not be visible to customers.
    """

    appointment_segments: typing.Optional[typing.List[AppointmentSegment]] = pydantic.Field(default=None)
    """
    A list of appointment segments for this booking.
    """

    transition_time_minutes: typing.Optional[int] = pydantic.Field(default=None)
    """
    Additional time at the end of a booking.
    Applications should not make this field visible to customers of a seller.
    """

    all_day: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the booking is of a full business day.
    """

    location_type: typing.Optional[BusinessAppointmentSettingsBookingLocationType] = pydantic.Field(default=None)
    """
    The type of location where the booking is held.
    See [BusinessAppointmentSettingsBookingLocationType](#type-businessappointmentsettingsbookinglocationtype) for possible values
    """

    creator_details: typing.Optional[BookingCreatorDetails] = pydantic.Field(default=None)
    """
    Information about the booking creator.
    """

    source: typing.Optional[BookingBookingSource] = pydantic.Field(default=None)
    """
    The source of the booking.
    Access to this field requires seller-level permissions.
    See [BookingBookingSource](#type-bookingbookingsource) for possible values
    """

    address: typing.Optional[Address] = pydantic.Field(default=None)
    """
    Stores a customer address if the location type is `CUSTOMER_LOCATION`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
