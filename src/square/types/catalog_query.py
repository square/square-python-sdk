# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .catalog_query_sorted_attribute import CatalogQuerySortedAttribute
import pydantic
from .catalog_query_exact import CatalogQueryExact
from .catalog_query_set import CatalogQuerySet
from .catalog_query_prefix import CatalogQueryPrefix
from .catalog_query_range import CatalogQueryRange
from .catalog_query_text import CatalogQueryText
from .catalog_query_items_for_tax import CatalogQueryItemsForTax
from .catalog_query_items_for_modifier_list import CatalogQueryItemsForModifierList
from .catalog_query_items_for_item_options import CatalogQueryItemsForItemOptions
from .catalog_query_item_variations_for_item_option_values import CatalogQueryItemVariationsForItemOptionValues
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CatalogQuery(UncheckedBaseModel):
    """
    A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.

    Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](api-endpoint:Catalog-SearchCatalogObjects).
    Any combination of the following types may be used together:
    - [exact_query](entity:CatalogQueryExact)
    - [prefix_query](entity:CatalogQueryPrefix)
    - [range_query](entity:CatalogQueryRange)
    - [sorted_attribute_query](entity:CatalogQuerySortedAttribute)
    - [text_query](entity:CatalogQueryText)

    All other query types cannot be combined with any others.

    When a query filter is based on an attribute, the attribute must be searchable.
    Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.

    Searchable attribute and objects queryable by searchable attributes:
    - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, `CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
    - `description`: `CatalogItem`, `CatalogItemOptionValue`
    - `abbreviation`: `CatalogItem`
    - `upc`: `CatalogItemVariation`
    - `sku`: `CatalogItemVariation`
    - `caption`: `CatalogImage`
    - `display_name`: `CatalogItemOption`

    For example, to search for [CatalogItem](entity:CatalogItem) objects by searchable attributes, you can use
    the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
    """

    sorted_attribute_query: typing.Optional[CatalogQuerySortedAttribute] = pydantic.Field(default=None)
    """
    A query expression to sort returned query result by the given attribute.
    """

    exact_query: typing.Optional[CatalogQueryExact] = pydantic.Field(default=None)
    """
    An exact query expression to return objects with attribute name and value
    matching the specified attribute name and value exactly. Value matching is case insensitive.
    """

    set_query: typing.Optional[CatalogQuerySet] = pydantic.Field(default=None)
    """
    A set query expression to return objects with attribute name and value
    matching the specified attribute name and any of the specified attribute values exactly.
    Value matching is case insensitive.
    """

    prefix_query: typing.Optional[CatalogQueryPrefix] = pydantic.Field(default=None)
    """
    A prefix query expression to return objects with attribute values
    that have a prefix matching the specified string value. Value matching is case insensitive.
    """

    range_query: typing.Optional[CatalogQueryRange] = pydantic.Field(default=None)
    """
    A range query expression to return objects with numeric values
    that lie in the specified range.
    """

    text_query: typing.Optional[CatalogQueryText] = pydantic.Field(default=None)
    """
    A text query expression to return objects whose searchable attributes contain all of the given
    keywords, irrespective of their order. For example, if a `CatalogItem` contains custom attribute values of
    `{"name": "t-shirt"}` and `{"description": "Small, Purple"}`, the query filter of `{"keywords": ["shirt", "sma", "purp"]}`
    returns this item.
    """

    items_for_tax_query: typing.Optional[CatalogQueryItemsForTax] = pydantic.Field(default=None)
    """
    A query expression to return items that have any of the specified taxes (as identified by the corresponding `CatalogTax` object IDs) enabled.
    """

    items_for_modifier_list_query: typing.Optional[CatalogQueryItemsForModifierList] = pydantic.Field(default=None)
    """
    A query expression to return items that have any of the given modifier list (as identified by the corresponding `CatalogModifierList`s IDs) enabled.
    """

    items_for_item_options_query: typing.Optional[CatalogQueryItemsForItemOptions] = pydantic.Field(default=None)
    """
    A query expression to return items that contains the specified item options (as identified the corresponding `CatalogItemOption` IDs).
    """

    item_variations_for_item_option_values_query: typing.Optional[CatalogQueryItemVariationsForItemOptionValues] = (
        pydantic.Field(default=None)
    )
    """
    A query expression to return item variations (of the [CatalogItemVariation](entity:CatalogItemVariation) type) that
    contain all of the specified `CatalogItemOption` IDs.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
