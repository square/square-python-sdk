# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .order_quantity_unit import OrderQuantityUnit
from .order_line_item_item_type import OrderLineItemItemType
from .order_line_item_modifier import OrderLineItemModifier
from .order_line_item_applied_tax import OrderLineItemAppliedTax
from .order_line_item_applied_discount import OrderLineItemAppliedDiscount
from .order_line_item_applied_service_charge import OrderLineItemAppliedServiceCharge
from .money import Money
from .order_line_item_pricing_blocklists import OrderLineItemPricingBlocklists
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class OrderLineItem(UncheckedBaseModel):
    """
    Represents a line item in an order. Each line item describes a different
    product to purchase, with its own quantity and price details.
    """

    uid: typing.Optional[str] = pydantic.Field(default=None)
    """
    A unique ID that identifies the line item only within this order.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the line item.
    """

    quantity: str = pydantic.Field()
    """
    The count, or measurement, of a line item being purchased:
    
    If `quantity` is a whole number, and `quantity_unit` is not specified, then `quantity` denotes an item count.  For example: `3` apples.
    
    If `quantity` is a whole or decimal number, and `quantity_unit` is also specified, then `quantity` denotes a measurement.  For example: `2.25` pounds of broccoli.
    
    For more information, see [Specify item quantity and measurement unit](https://developer.squareup.com/docs/orders-api/create-orders#specify-item-quantity-and-measurement-unit).
    
    Line items with a quantity of `0` are automatically removed
    when paying for or otherwise completing the order.
    """

    quantity_unit: typing.Optional[OrderQuantityUnit] = pydantic.Field(default=None)
    """
    The measurement unit and decimal precision that this line item's quantity is measured in.
    """

    note: typing.Optional[str] = pydantic.Field(default=None)
    """
    An optional note associated with the line item.
    """

    catalog_object_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The [CatalogItemVariation](entity:CatalogItemVariation) ID applied to this line item.
    """

    catalog_version: typing.Optional[int] = pydantic.Field(default=None)
    """
    The version of the catalog object that this line item references.
    """

    variation_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the variation applied to this line item.
    """

    item_type: typing.Optional[OrderLineItemItemType] = pydantic.Field(default=None)
    """
    The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
    activation or reloading of a gift card.
    See [OrderLineItemItemType](#type-orderlineitemitemtype) for possible values
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[str]]] = pydantic.Field(default=None)
    """
    Application-defined data attached to this line item. Metadata fields are intended
    to store descriptive references or associations with an entity in another system or store brief
    information about the object. Square does not process this field; it only stores and returns it
    in relevant API calls. Do not use metadata to store any sensitive information (such as personally
    identifiable information or card details).
    
    Keys written by applications must be 60 characters or less and must be in the character set
    `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
    with a namespace, separated from the key with a ':' character.
    
    Values have a maximum length of 255 characters.
    
    An application can have up to 10 entries per metadata field.
    
    Entries written by applications are private and can only be read or modified by the same
    application.
    
    For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    """

    modifiers: typing.Optional[typing.List[OrderLineItemModifier]] = pydantic.Field(default=None)
    """
    The [CatalogModifier](entity:CatalogModifier)s applied to this line item.
    """

    applied_taxes: typing.Optional[typing.List[OrderLineItemAppliedTax]] = pydantic.Field(default=None)
    """
    The list of references to taxes applied to this line item. Each
    `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
    top-level `OrderLineItemTax` applied to the line item. On reads, the
    amount applied is populated.
    
    An `OrderLineItemAppliedTax` is automatically created on every line
    item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
    records for `LINE_ITEM` scoped taxes must be added in requests for the tax
    to apply to any line items.
    
    To change the amount of a tax, modify the referenced top-level tax.
    """

    applied_discounts: typing.Optional[typing.List[OrderLineItemAppliedDiscount]] = pydantic.Field(default=None)
    """
    The list of references to discounts applied to this line item. Each
    `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
    `OrderLineItemDiscounts` applied to the line item. On reads, the amount
    applied is populated.
    
    An `OrderLineItemAppliedDiscount` is automatically created on every line item for all
    `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
    for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
    line items.
    
    To change the amount of a discount, modify the referenced top-level discount.
    """

    applied_service_charges: typing.Optional[typing.List[OrderLineItemAppliedServiceCharge]] = pydantic.Field(
        default=None
    )
    """
    The list of references to service charges applied to this line item. Each
    `OrderLineItemAppliedServiceCharge` has a `service_charge_id` that references the `uid` of a
    top-level `OrderServiceCharge` applied to the line item. On reads, the amount applied is
    populated.
    
    To change the amount of a service charge, modify the referenced top-level service charge.
    """

    base_price_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The base price for a single unit of the line item.
    """

    variation_total_price_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The total price of all item variations sold in this line item.
    The price is calculated as `base_price_money` multiplied by `quantity`.
    It does not include modifiers.
    """

    gross_sales_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The amount of money made in gross sales for this line item.
    The amount is calculated as the sum of the variation's total price and each modifier's total price.
    For inclusive tax items in the US, Canada, and Japan, tax is deducted from `gross_sales_money`. For Europe and
    Australia, inclusive tax remains as part of the gross sale calculation.
    """

    total_tax_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The total amount of tax money to collect for the line item.
    """

    total_discount_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The total amount of discount money to collect for the line item.
    """

    total_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The total amount of money to collect for this line item.
    """

    pricing_blocklists: typing.Optional[OrderLineItemPricingBlocklists] = pydantic.Field(default=None)
    """
    Describes pricing adjustments that are blocked from automatic
    application to a line item. For more information, see
    [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
    """

    total_service_charge_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The total amount of apportioned service charge money to collect for the line item.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
