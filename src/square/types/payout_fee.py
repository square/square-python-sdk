# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .money import Money
from .payout_fee_type import PayoutFeeType


class PayoutFee(UncheckedBaseModel):
    """
    Represents a payout fee that can incur as part of a payout.
    """

    amount_money: typing.Optional[Money] = pydantic.Field(default=None)
    """
    The money amount of the payout fee.
    """

    effective_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    The timestamp of when the fee takes effect, in RFC 3339 format.
    """

    type: typing.Optional[PayoutFeeType] = pydantic.Field(default=None)
    """
    The type of fee assessed as part of the payout.
    See [PayoutFeeType](#type-payoutfeetype) for possible values
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
