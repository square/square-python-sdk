# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ScheduledShiftDetails(UncheckedBaseModel):
    """
    Represents shift details for draft and published versions of a [scheduled shift](entity:ScheduledShift),
    such as job ID, team member assignment, and start and end times.
    """

    team_member_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the [team member](entity:TeamMember) scheduled for the shift.
    """

    location_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the [location](entity:Location) the shift is scheduled for.
    """

    job_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the [job](entity:Job) the shift is scheduled for.
    """

    start_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    The start time of the shift, in RFC 3339 format in the time zone &plus;
    offset of the shift location specified in `location_id`. Precision up to the minute
    is respected; seconds are truncated.
    """

    end_at: typing.Optional[str] = pydantic.Field(default=None)
    """
    The end time for the shift, in RFC 3339 format in the time zone &plus;
    offset of the shift location specified in `location_id`. Precision up to the minute
    is respected; seconds are truncated.
    """

    notes: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional notes for the shift.
    """

    is_deleted: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the draft shift version is deleted. If set to `true` when the shift
    is published, the entire scheduled shift (including the published shift) is deleted and
    cannot be accessed using any endpoint.
    """

    timezone: typing.Optional[str] = pydantic.Field(default=None)
    """
    The time zone of the shift location, calculated based on the `location_id`. This field
    is provided for convenience.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
