# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import pydantic
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CatalogQuerySet(UncheckedBaseModel):
    """
    The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
    the `attribute_values`.
    """

    attribute_name: str = pydantic.Field()
    """
    The name of the attribute to be searched. Matching of the attribute name is exact.
    """

    attribute_values: typing.List[str] = pydantic.Field()
    """
    The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.
    A maximum of 250 values may be searched in a request.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
