# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel


class TransferOrderLine(UncheckedBaseModel):
    """
    Represents a line item in a transfer order. Each line item tracks a specific
    [CatalogItemVariation](entity:CatalogItemVariation) being transferred, including ordered quantities
    and receipt status.
    """

    uid: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique system-generated identifier for the line item. Provide when updating/removing a line via [UpdateTransferOrder](api-endpoint:TransferOrders-UpdateTransferOrder).
    """

    item_variation_id: str = pydantic.Field()
    """
    The required identifier of the [CatalogItemVariation](entity:CatalogItemVariation) being transferred. Must reference
    a valid catalog item variation that exists in the [Catalog](api:Catalog).
    """

    quantity_ordered: str = pydantic.Field()
    """
    Total quantity ordered, formatted as a decimal string (e.g. "10 or 10.0000"). Required to be a positive number.
    
    To remove a line item, set `remove` to `true` in [UpdateTransferOrder](api-endpoint:TransferOrders-UpdateTransferOrder).
    """

    quantity_pending: typing.Optional[str] = pydantic.Field(default=None)
    """
    Calculated quantity of this line item's yet to be received stock. This is the difference between the total quantity ordered and the sum of quantities received, canceled, and damaged.
    """

    quantity_received: typing.Optional[str] = pydantic.Field(default=None)
    """
    Quantity received at destination. These items are added to the destination
    [Location](entity:Location)'s inventory with [InventoryState](entity:InventoryState) of IN_STOCK.
    
    This field cannot be updated directly in Create/Update operations, instead use [ReceiveTransferOrder](api-endpoint:TransferOrders-ReceiveTransferOrder).
    """

    quantity_damaged: typing.Optional[str] = pydantic.Field(default=None)
    """
    Quantity received in damaged condition. These items are added to the destination
    [Location](entity:Location)'s inventory with [InventoryState](entity:InventoryState) of WASTE.
    
    This field cannot be updated directly in Create/Update operations, instead use [ReceiveTransferOrder](api-endpoint:TransferOrders-ReceiveTransferOrder).
    """

    quantity_canceled: typing.Optional[str] = pydantic.Field(default=None)
    """
    Quantity that was canceled. These items will be immediately added to inventory in the source location.
    
    This field cannot be updated directly in Create/Update operations, instead use [ReceiveTransferOrder](api-endpoint:TransferOrders-ReceiveTransferOrder) or [CancelTransferOrder](api-endpoint:TransferOrders-CancelTransferOrder).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
