# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .measurement_unit_custom import MeasurementUnitCustom
import pydantic
from .measurement_unit_area import MeasurementUnitArea
from .measurement_unit_length import MeasurementUnitLength
from .measurement_unit_volume import MeasurementUnitVolume
from .measurement_unit_weight import MeasurementUnitWeight
from .measurement_unit_generic import MeasurementUnitGeneric
from .measurement_unit_time import MeasurementUnitTime
from .measurement_unit_unit_type import MeasurementUnitUnitType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class MeasurementUnit(UncheckedBaseModel):
    """
    Represents a unit of measurement to use with a quantity, such as ounces
    or inches. Exactly one of the following fields are required: `custom_unit`,
    `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
    """

    custom_unit: typing.Optional[MeasurementUnitCustom] = pydantic.Field(default=None)
    """
    A custom unit of measurement defined by the seller using the Point of Sale
    app or ad-hoc as an order line item.
    """

    area_unit: typing.Optional[MeasurementUnitArea] = pydantic.Field(default=None)
    """
    Represents a standard area unit.
    See [MeasurementUnitArea](#type-measurementunitarea) for possible values
    """

    length_unit: typing.Optional[MeasurementUnitLength] = pydantic.Field(default=None)
    """
    Represents a standard length unit.
    See [MeasurementUnitLength](#type-measurementunitlength) for possible values
    """

    volume_unit: typing.Optional[MeasurementUnitVolume] = pydantic.Field(default=None)
    """
    Represents a standard volume unit.
    See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values
    """

    weight_unit: typing.Optional[MeasurementUnitWeight] = pydantic.Field(default=None)
    """
    Represents a standard unit of weight or mass.
    See [MeasurementUnitWeight](#type-measurementunitweight) for possible values
    """

    generic_unit: typing.Optional[MeasurementUnitGeneric] = pydantic.Field(default=None)
    """
    Reserved for API integrations that lack the ability to specify a real measurement unit
    See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values
    """

    time_unit: typing.Optional[MeasurementUnitTime] = pydantic.Field(default=None)
    """
    Represents a standard unit of time.
    See [MeasurementUnitTime](#type-measurementunittime) for possible values
    """

    type: typing.Optional[MeasurementUnitUnitType] = pydantic.Field(default=None)
    """
    Represents the type of the measurement unit.
    See [MeasurementUnitUnitType](#type-measurementunitunittype) for possible values
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
