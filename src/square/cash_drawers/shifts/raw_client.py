# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pagination import AsyncPager, BaseHttpResponse, SyncPager
from ...core.request_options import RequestOptions
from ...core.unchecked_base_model import construct_type
from ...types.cash_drawer_shift_event import CashDrawerShiftEvent
from ...types.cash_drawer_shift_summary import CashDrawerShiftSummary
from ...types.get_cash_drawer_shift_response import GetCashDrawerShiftResponse
from ...types.list_cash_drawer_shift_events_response import ListCashDrawerShiftEventsResponse
from ...types.list_cash_drawer_shifts_response import ListCashDrawerShiftsResponse
from ...types.sort_order import SortOrder


class RawShiftsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        location_id: str,
        sort_order: typing.Optional[SortOrder] = None,
        begin_time: typing.Optional[str] = None,
        end_time: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[CashDrawerShiftSummary]:
        """
        Provides the details for all of the cash drawer shifts for a location
        in a date range.

        Parameters
        ----------
        location_id : str
            The ID of the location to query for a list of cash drawer shifts.

        sort_order : typing.Optional[SortOrder]
            The order in which cash drawer shifts are listed in the response,
            based on their opened_at field. Default value: ASC

        begin_time : typing.Optional[str]
            The inclusive start time of the query on opened_at, in ISO 8601 format.

        end_time : typing.Optional[str]
            The exclusive end date of the query on opened_at, in ISO 8601 format.

        limit : typing.Optional[int]
            Number of cash drawer shift events in a page of results (200 by
            default, 1000 max).

        cursor : typing.Optional[str]
            Opaque cursor for fetching the next page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[CashDrawerShiftSummary]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/cash-drawers/shifts",
            method="GET",
            params={
                "location_id": location_id,
                "sort_order": sort_order,
                "begin_time": begin_time,
                "end_time": end_time,
                "limit": limit,
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListCashDrawerShiftsResponse,
                    construct_type(
                        type_=ListCashDrawerShiftsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.cash_drawer_shifts
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list(
                    location_id=location_id,
                    sort_order=sort_order,
                    begin_time=begin_time,
                    end_time=end_time,
                    limit=limit,
                    cursor=_parsed_next,
                    request_options=request_options,
                )
                return SyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self, shift_id: str, *, location_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetCashDrawerShiftResponse]:
        """
        Provides the summary details for a single cash drawer shift. See
        [ListCashDrawerShiftEvents](api-endpoint:CashDrawers-ListCashDrawerShiftEvents) for a list of cash drawer shift events.

        Parameters
        ----------
        shift_id : str
            The shift ID.

        location_id : str
            The ID of the location to retrieve cash drawer shifts from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetCashDrawerShiftResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/cash-drawers/shifts/{jsonable_encoder(shift_id)}",
            method="GET",
            params={
                "location_id": location_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetCashDrawerShiftResponse,
                    construct_type(
                        type_=GetCashDrawerShiftResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_events(
        self,
        shift_id: str,
        *,
        location_id: str,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[CashDrawerShiftEvent]:
        """
        Provides a paginated list of events for a single cash drawer shift.

        Parameters
        ----------
        shift_id : str
            The shift ID.

        location_id : str
            The ID of the location to list cash drawer shifts for.

        limit : typing.Optional[int]
            Number of resources to be returned in a page of results (200 by
            default, 1000 max).

        cursor : typing.Optional[str]
            Opaque cursor for fetching the next page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[CashDrawerShiftEvent]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/cash-drawers/shifts/{jsonable_encoder(shift_id)}/events",
            method="GET",
            params={
                "location_id": location_id,
                "limit": limit,
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListCashDrawerShiftEventsResponse,
                    construct_type(
                        type_=ListCashDrawerShiftEventsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.cash_drawer_shift_events
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list_events(
                    shift_id,
                    location_id=location_id,
                    limit=limit,
                    cursor=_parsed_next,
                    request_options=request_options,
                )
                return SyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawShiftsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        location_id: str,
        sort_order: typing.Optional[SortOrder] = None,
        begin_time: typing.Optional[str] = None,
        end_time: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[CashDrawerShiftSummary]:
        """
        Provides the details for all of the cash drawer shifts for a location
        in a date range.

        Parameters
        ----------
        location_id : str
            The ID of the location to query for a list of cash drawer shifts.

        sort_order : typing.Optional[SortOrder]
            The order in which cash drawer shifts are listed in the response,
            based on their opened_at field. Default value: ASC

        begin_time : typing.Optional[str]
            The inclusive start time of the query on opened_at, in ISO 8601 format.

        end_time : typing.Optional[str]
            The exclusive end date of the query on opened_at, in ISO 8601 format.

        limit : typing.Optional[int]
            Number of cash drawer shift events in a page of results (200 by
            default, 1000 max).

        cursor : typing.Optional[str]
            Opaque cursor for fetching the next page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[CashDrawerShiftSummary]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/cash-drawers/shifts",
            method="GET",
            params={
                "location_id": location_id,
                "sort_order": sort_order,
                "begin_time": begin_time,
                "end_time": end_time,
                "limit": limit,
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListCashDrawerShiftsResponse,
                    construct_type(
                        type_=ListCashDrawerShiftsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.cash_drawer_shifts
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""

                async def _get_next():
                    return await self.list(
                        location_id=location_id,
                        sort_order=sort_order,
                        begin_time=begin_time,
                        end_time=end_time,
                        limit=limit,
                        cursor=_parsed_next,
                        request_options=request_options,
                    )

                return AsyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, shift_id: str, *, location_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetCashDrawerShiftResponse]:
        """
        Provides the summary details for a single cash drawer shift. See
        [ListCashDrawerShiftEvents](api-endpoint:CashDrawers-ListCashDrawerShiftEvents) for a list of cash drawer shift events.

        Parameters
        ----------
        shift_id : str
            The shift ID.

        location_id : str
            The ID of the location to retrieve cash drawer shifts from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetCashDrawerShiftResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/cash-drawers/shifts/{jsonable_encoder(shift_id)}",
            method="GET",
            params={
                "location_id": location_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetCashDrawerShiftResponse,
                    construct_type(
                        type_=GetCashDrawerShiftResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_events(
        self,
        shift_id: str,
        *,
        location_id: str,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[CashDrawerShiftEvent]:
        """
        Provides a paginated list of events for a single cash drawer shift.

        Parameters
        ----------
        shift_id : str
            The shift ID.

        location_id : str
            The ID of the location to list cash drawer shifts for.

        limit : typing.Optional[int]
            Number of resources to be returned in a page of results (200 by
            default, 1000 max).

        cursor : typing.Optional[str]
            Opaque cursor for fetching the next page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[CashDrawerShiftEvent]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/cash-drawers/shifts/{jsonable_encoder(shift_id)}/events",
            method="GET",
            params={
                "location_id": location_id,
                "limit": limit,
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListCashDrawerShiftEventsResponse,
                    construct_type(
                        type_=ListCashDrawerShiftEventsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.cash_drawer_shift_events
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""

                async def _get_next():
                    return await self.list_events(
                        shift_id,
                        location_id=location_id,
                        limit=limit,
                        cursor=_parsed_next,
                        request_options=request_options,
                    )

                return AsyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
