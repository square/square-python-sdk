# This file was auto-generated by Fern from our API Definition.

from ...core.client_wrapper import SyncClientWrapper
import typing
from ...core.request_options import RequestOptions
from ...core.http_response import HttpResponse
from ...types.get_cash_drawer_shift_response import GetCashDrawerShiftResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper
from ...core.http_response import AsyncHttpResponse


class RawShiftsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self, shift_id: str, *, location_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetCashDrawerShiftResponse]:
        """
        Provides the summary details for a single cash drawer shift. See
        [ListCashDrawerShiftEvents](api-endpoint:CashDrawers-ListCashDrawerShiftEvents) for a list of cash drawer shift events.

        Parameters
        ----------
        shift_id : str
            The shift ID.

        location_id : str
            The ID of the location to retrieve cash drawer shifts from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetCashDrawerShiftResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/cash-drawers/shifts/{jsonable_encoder(shift_id)}",
            method="GET",
            params={
                "location_id": location_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetCashDrawerShiftResponse,
                    construct_type(
                        type_=GetCashDrawerShiftResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawShiftsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self, shift_id: str, *, location_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetCashDrawerShiftResponse]:
        """
        Provides the summary details for a single cash drawer shift. See
        [ListCashDrawerShiftEvents](api-endpoint:CashDrawers-ListCashDrawerShiftEvents) for a list of cash drawer shift events.

        Parameters
        ----------
        shift_id : str
            The shift ID.

        location_id : str
            The ID of the location to retrieve cash drawer shifts from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetCashDrawerShiftResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/cash-drawers/shifts/{jsonable_encoder(shift_id)}",
            method="GET",
            params={
                "location_id": location_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetCashDrawerShiftResponse,
                    construct_type(
                        type_=GetCashDrawerShiftResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
