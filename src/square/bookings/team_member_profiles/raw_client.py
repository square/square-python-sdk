# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pagination import AsyncPager, BaseHttpResponse, SyncPager
from ...core.request_options import RequestOptions
from ...core.unchecked_base_model import construct_type
from ...types.get_team_member_booking_profile_response import GetTeamMemberBookingProfileResponse
from ...types.list_team_member_booking_profiles_response import ListTeamMemberBookingProfilesResponse
from ...types.team_member_booking_profile import TeamMemberBookingProfile


class RawTeamMemberProfilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        bookable_only: typing.Optional[bool] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[TeamMemberBookingProfile]:
        """
        Lists booking profiles for team members.

        Parameters
        ----------
        bookable_only : typing.Optional[bool]
            Indicates whether to include only bookable team members in the returned result (`true`) or not (`false`).

        limit : typing.Optional[int]
            The maximum number of results to return in a paged response.

        cursor : typing.Optional[str]
            The pagination cursor from the preceding response to return the next page of the results. Do not set this when retrieving the first page of the results.

        location_id : typing.Optional[str]
            Indicates whether to include only team members enabled at the given location in the returned result.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[TeamMemberBookingProfile]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/bookings/team-member-booking-profiles",
            method="GET",
            params={
                "bookable_only": bookable_only,
                "limit": limit,
                "cursor": cursor,
                "location_id": location_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListTeamMemberBookingProfilesResponse,
                    construct_type(
                        type_=ListTeamMemberBookingProfilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.team_member_booking_profiles
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list(
                    bookable_only=bookable_only,
                    limit=limit,
                    cursor=_parsed_next,
                    location_id=location_id,
                    request_options=request_options,
                )
                return SyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self, team_member_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetTeamMemberBookingProfileResponse]:
        """
        Retrieves a team member's booking profile.

        Parameters
        ----------
        team_member_id : str
            The ID of the team member to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetTeamMemberBookingProfileResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/bookings/team-member-booking-profiles/{jsonable_encoder(team_member_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetTeamMemberBookingProfileResponse,
                    construct_type(
                        type_=GetTeamMemberBookingProfileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawTeamMemberProfilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        bookable_only: typing.Optional[bool] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[TeamMemberBookingProfile]:
        """
        Lists booking profiles for team members.

        Parameters
        ----------
        bookable_only : typing.Optional[bool]
            Indicates whether to include only bookable team members in the returned result (`true`) or not (`false`).

        limit : typing.Optional[int]
            The maximum number of results to return in a paged response.

        cursor : typing.Optional[str]
            The pagination cursor from the preceding response to return the next page of the results. Do not set this when retrieving the first page of the results.

        location_id : typing.Optional[str]
            Indicates whether to include only team members enabled at the given location in the returned result.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[TeamMemberBookingProfile]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/bookings/team-member-booking-profiles",
            method="GET",
            params={
                "bookable_only": bookable_only,
                "limit": limit,
                "cursor": cursor,
                "location_id": location_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListTeamMemberBookingProfilesResponse,
                    construct_type(
                        type_=ListTeamMemberBookingProfilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.team_member_booking_profiles
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""

                async def _get_next():
                    return await self.list(
                        bookable_only=bookable_only,
                        limit=limit,
                        cursor=_parsed_next,
                        location_id=location_id,
                        request_options=request_options,
                    )

                return AsyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, team_member_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetTeamMemberBookingProfileResponse]:
        """
        Retrieves a team member's booking profile.

        Parameters
        ----------
        team_member_id : str
            The ID of the team member to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetTeamMemberBookingProfileResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/bookings/team-member-booking-profiles/{jsonable_encoder(team_member_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetTeamMemberBookingProfileResponse,
                    construct_type(
                        type_=GetTeamMemberBookingProfileResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
