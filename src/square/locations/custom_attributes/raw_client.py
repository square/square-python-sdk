# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...requests.bulk_delete_location_custom_attributes_request_location_custom_attribute_delete_request import (
    BulkDeleteLocationCustomAttributesRequestLocationCustomAttributeDeleteRequestParams,
)
from ...core.request_options import RequestOptions
from ...core.http_response import HttpResponse
from ...types.bulk_delete_location_custom_attributes_response import BulkDeleteLocationCustomAttributesResponse
from ...core.serialization import convert_and_respect_annotation_metadata
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...requests.bulk_upsert_location_custom_attributes_request_location_custom_attribute_upsert_request import (
    BulkUpsertLocationCustomAttributesRequestLocationCustomAttributeUpsertRequestParams,
)
from ...types.bulk_upsert_location_custom_attributes_response import BulkUpsertLocationCustomAttributesResponse
from ...types.retrieve_location_custom_attribute_response import RetrieveLocationCustomAttributeResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...requests.custom_attribute import CustomAttributeParams
from ...types.upsert_location_custom_attribute_response import UpsertLocationCustomAttributeResponse
from ...types.delete_location_custom_attribute_response import DeleteLocationCustomAttributeResponse
from ...core.client_wrapper import AsyncClientWrapper
from ...core.http_response import AsyncHttpResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawCustomAttributesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def batch_delete(
        self,
        *,
        values: typing.Dict[str, BulkDeleteLocationCustomAttributesRequestLocationCustomAttributeDeleteRequestParams],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BulkDeleteLocationCustomAttributesResponse]:
        """
        Deletes [custom attributes](entity:CustomAttribute) for locations as a bulk operation.
        To delete a custom attribute owned by another application, the `visibility` setting must be
        `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        values : typing.Dict[str, BulkDeleteLocationCustomAttributesRequestLocationCustomAttributeDeleteRequestParams]
            The data used to update the `CustomAttribute` objects.
            The keys must be unique and are used to map to the corresponding response.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BulkDeleteLocationCustomAttributesResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/locations/custom-attributes/bulk-delete",
            method="POST",
            json={
                "values": convert_and_respect_annotation_metadata(
                    object_=values,
                    annotation=typing.Dict[
                        str, BulkDeleteLocationCustomAttributesRequestLocationCustomAttributeDeleteRequestParams
                    ],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BulkDeleteLocationCustomAttributesResponse,
                    construct_type(
                        type_=BulkDeleteLocationCustomAttributesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def batch_upsert(
        self,
        *,
        values: typing.Dict[str, BulkUpsertLocationCustomAttributesRequestLocationCustomAttributeUpsertRequestParams],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BulkUpsertLocationCustomAttributesResponse]:
        """
        Creates or updates [custom attributes](entity:CustomAttribute) for locations as a bulk operation.
        Use this endpoint to set the value of one or more custom attributes for one or more locations.
        A custom attribute is based on a custom attribute definition in a Square seller account, which is
        created using the [CreateLocationCustomAttributeDefinition](api-endpoint:LocationCustomAttributes-CreateLocationCustomAttributeDefinition) endpoint.
        This `BulkUpsertLocationCustomAttributes` endpoint accepts a map of 1 to 25 individual upsert
        requests and returns a map of individual upsert responses. Each upsert request has a unique ID
        and provides a location ID and custom attribute. Each upsert response is returned with the ID
        of the corresponding request.
        To create or update a custom attribute owned by another application, the `visibility` setting
        must be `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        values : typing.Dict[str, BulkUpsertLocationCustomAttributesRequestLocationCustomAttributeUpsertRequestParams]
            A map containing 1 to 25 individual upsert requests. For each request, provide an
            arbitrary ID that is unique for this `BulkUpsertLocationCustomAttributes` request and the
            information needed to create or update a custom attribute.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BulkUpsertLocationCustomAttributesResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/locations/custom-attributes/bulk-upsert",
            method="POST",
            json={
                "values": convert_and_respect_annotation_metadata(
                    object_=values,
                    annotation=typing.Dict[
                        str, BulkUpsertLocationCustomAttributesRequestLocationCustomAttributeUpsertRequestParams
                    ],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BulkUpsertLocationCustomAttributesResponse,
                    construct_type(
                        type_=BulkUpsertLocationCustomAttributesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        location_id: str,
        key: str,
        *,
        with_definition: typing.Optional[bool] = None,
        version: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[RetrieveLocationCustomAttributeResponse]:
        """
        Retrieves a [custom attribute](entity:CustomAttribute) associated with a location.
        You can use the `with_definition` query parameter to also retrieve the custom attribute definition
        in the same call.
        To retrieve a custom attribute owned by another application, the `visibility` setting must be
        `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        location_id : str
            The ID of the target [location](entity:Location).

        key : str
            The key of the custom attribute to retrieve. This key must match the `key` of a custom
            attribute definition in the Square seller account. If the requesting application is not the
            definition owner, you must use the qualified key.

        with_definition : typing.Optional[bool]
            Indicates whether to return the [custom attribute definition](entity:CustomAttributeDefinition) in the `definition` field of
            the custom attribute. Set this parameter to `true` to get the name and description of the custom
            attribute, information about the data type, or other definition details. The default value is `false`.

        version : typing.Optional[int]
            The current version of the custom attribute, which is used for strongly consistent reads to
            guarantee that you receive the most up-to-date data. When included in the request, Square
            returns the specified version or a higher version if one exists. If the specified version is
            higher than the current version, Square returns a `BAD_REQUEST` error.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[RetrieveLocationCustomAttributeResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/locations/{jsonable_encoder(location_id)}/custom-attributes/{jsonable_encoder(key)}",
            method="GET",
            params={
                "with_definition": with_definition,
                "version": version,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    RetrieveLocationCustomAttributeResponse,
                    construct_type(
                        type_=RetrieveLocationCustomAttributeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upsert(
        self,
        location_id: str,
        key: str,
        *,
        custom_attribute: CustomAttributeParams,
        idempotency_key: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UpsertLocationCustomAttributeResponse]:
        """
        Creates or updates a [custom attribute](entity:CustomAttribute) for a location.
        Use this endpoint to set the value of a custom attribute for a specified location.
        A custom attribute is based on a custom attribute definition in a Square seller account, which
        is created using the [CreateLocationCustomAttributeDefinition](api-endpoint:LocationCustomAttributes-CreateLocationCustomAttributeDefinition) endpoint.
        To create or update a custom attribute owned by another application, the `visibility` setting
        must be `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        location_id : str
            The ID of the target [location](entity:Location).

        key : str
            The key of the custom attribute to create or update. This key must match the `key` of a
            custom attribute definition in the Square seller account. If the requesting application is not
            the definition owner, you must use the qualified key.

        custom_attribute : CustomAttributeParams
            The custom attribute to create or update, with the following fields:
            - `value`. This value must conform to the `schema` specified by the definition.
            For more information, see [Supported data types](https://developer.squareup.com/docs/devtools/customattributes/overview#supported-data-types).
            - `version`. To enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency)
            control for an update operation, include the current version of the custom attribute.
            If this is not important for your application, version can be set to -1.

        idempotency_key : typing.Optional[str]
            A unique identifier for this request, used to ensure idempotency. For more information,
            see [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UpsertLocationCustomAttributeResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/locations/{jsonable_encoder(location_id)}/custom-attributes/{jsonable_encoder(key)}",
            method="POST",
            json={
                "custom_attribute": convert_and_respect_annotation_metadata(
                    object_=custom_attribute, annotation=CustomAttributeParams, direction="write"
                ),
                "idempotency_key": idempotency_key,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UpsertLocationCustomAttributeResponse,
                    construct_type(
                        type_=UpsertLocationCustomAttributeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, location_id: str, key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[DeleteLocationCustomAttributeResponse]:
        """
        Deletes a [custom attribute](entity:CustomAttribute) associated with a location.
        To delete a custom attribute owned by another application, the `visibility` setting must be
        `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        location_id : str
            The ID of the target [location](entity:Location).

        key : str
            The key of the custom attribute to delete. This key must match the `key` of a custom
            attribute definition in the Square seller account. If the requesting application is not the
            definition owner, you must use the qualified key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DeleteLocationCustomAttributeResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/locations/{jsonable_encoder(location_id)}/custom-attributes/{jsonable_encoder(key)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteLocationCustomAttributeResponse,
                    construct_type(
                        type_=DeleteLocationCustomAttributeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawCustomAttributesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def batch_delete(
        self,
        *,
        values: typing.Dict[str, BulkDeleteLocationCustomAttributesRequestLocationCustomAttributeDeleteRequestParams],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BulkDeleteLocationCustomAttributesResponse]:
        """
        Deletes [custom attributes](entity:CustomAttribute) for locations as a bulk operation.
        To delete a custom attribute owned by another application, the `visibility` setting must be
        `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        values : typing.Dict[str, BulkDeleteLocationCustomAttributesRequestLocationCustomAttributeDeleteRequestParams]
            The data used to update the `CustomAttribute` objects.
            The keys must be unique and are used to map to the corresponding response.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BulkDeleteLocationCustomAttributesResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/locations/custom-attributes/bulk-delete",
            method="POST",
            json={
                "values": convert_and_respect_annotation_metadata(
                    object_=values,
                    annotation=typing.Dict[
                        str, BulkDeleteLocationCustomAttributesRequestLocationCustomAttributeDeleteRequestParams
                    ],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BulkDeleteLocationCustomAttributesResponse,
                    construct_type(
                        type_=BulkDeleteLocationCustomAttributesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def batch_upsert(
        self,
        *,
        values: typing.Dict[str, BulkUpsertLocationCustomAttributesRequestLocationCustomAttributeUpsertRequestParams],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BulkUpsertLocationCustomAttributesResponse]:
        """
        Creates or updates [custom attributes](entity:CustomAttribute) for locations as a bulk operation.
        Use this endpoint to set the value of one or more custom attributes for one or more locations.
        A custom attribute is based on a custom attribute definition in a Square seller account, which is
        created using the [CreateLocationCustomAttributeDefinition](api-endpoint:LocationCustomAttributes-CreateLocationCustomAttributeDefinition) endpoint.
        This `BulkUpsertLocationCustomAttributes` endpoint accepts a map of 1 to 25 individual upsert
        requests and returns a map of individual upsert responses. Each upsert request has a unique ID
        and provides a location ID and custom attribute. Each upsert response is returned with the ID
        of the corresponding request.
        To create or update a custom attribute owned by another application, the `visibility` setting
        must be `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        values : typing.Dict[str, BulkUpsertLocationCustomAttributesRequestLocationCustomAttributeUpsertRequestParams]
            A map containing 1 to 25 individual upsert requests. For each request, provide an
            arbitrary ID that is unique for this `BulkUpsertLocationCustomAttributes` request and the
            information needed to create or update a custom attribute.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BulkUpsertLocationCustomAttributesResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/locations/custom-attributes/bulk-upsert",
            method="POST",
            json={
                "values": convert_and_respect_annotation_metadata(
                    object_=values,
                    annotation=typing.Dict[
                        str, BulkUpsertLocationCustomAttributesRequestLocationCustomAttributeUpsertRequestParams
                    ],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BulkUpsertLocationCustomAttributesResponse,
                    construct_type(
                        type_=BulkUpsertLocationCustomAttributesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        location_id: str,
        key: str,
        *,
        with_definition: typing.Optional[bool] = None,
        version: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[RetrieveLocationCustomAttributeResponse]:
        """
        Retrieves a [custom attribute](entity:CustomAttribute) associated with a location.
        You can use the `with_definition` query parameter to also retrieve the custom attribute definition
        in the same call.
        To retrieve a custom attribute owned by another application, the `visibility` setting must be
        `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        location_id : str
            The ID of the target [location](entity:Location).

        key : str
            The key of the custom attribute to retrieve. This key must match the `key` of a custom
            attribute definition in the Square seller account. If the requesting application is not the
            definition owner, you must use the qualified key.

        with_definition : typing.Optional[bool]
            Indicates whether to return the [custom attribute definition](entity:CustomAttributeDefinition) in the `definition` field of
            the custom attribute. Set this parameter to `true` to get the name and description of the custom
            attribute, information about the data type, or other definition details. The default value is `false`.

        version : typing.Optional[int]
            The current version of the custom attribute, which is used for strongly consistent reads to
            guarantee that you receive the most up-to-date data. When included in the request, Square
            returns the specified version or a higher version if one exists. If the specified version is
            higher than the current version, Square returns a `BAD_REQUEST` error.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[RetrieveLocationCustomAttributeResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/locations/{jsonable_encoder(location_id)}/custom-attributes/{jsonable_encoder(key)}",
            method="GET",
            params={
                "with_definition": with_definition,
                "version": version,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    RetrieveLocationCustomAttributeResponse,
                    construct_type(
                        type_=RetrieveLocationCustomAttributeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upsert(
        self,
        location_id: str,
        key: str,
        *,
        custom_attribute: CustomAttributeParams,
        idempotency_key: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UpsertLocationCustomAttributeResponse]:
        """
        Creates or updates a [custom attribute](entity:CustomAttribute) for a location.
        Use this endpoint to set the value of a custom attribute for a specified location.
        A custom attribute is based on a custom attribute definition in a Square seller account, which
        is created using the [CreateLocationCustomAttributeDefinition](api-endpoint:LocationCustomAttributes-CreateLocationCustomAttributeDefinition) endpoint.
        To create or update a custom attribute owned by another application, the `visibility` setting
        must be `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        location_id : str
            The ID of the target [location](entity:Location).

        key : str
            The key of the custom attribute to create or update. This key must match the `key` of a
            custom attribute definition in the Square seller account. If the requesting application is not
            the definition owner, you must use the qualified key.

        custom_attribute : CustomAttributeParams
            The custom attribute to create or update, with the following fields:
            - `value`. This value must conform to the `schema` specified by the definition.
            For more information, see [Supported data types](https://developer.squareup.com/docs/devtools/customattributes/overview#supported-data-types).
            - `version`. To enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency)
            control for an update operation, include the current version of the custom attribute.
            If this is not important for your application, version can be set to -1.

        idempotency_key : typing.Optional[str]
            A unique identifier for this request, used to ensure idempotency. For more information,
            see [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UpsertLocationCustomAttributeResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/locations/{jsonable_encoder(location_id)}/custom-attributes/{jsonable_encoder(key)}",
            method="POST",
            json={
                "custom_attribute": convert_and_respect_annotation_metadata(
                    object_=custom_attribute, annotation=CustomAttributeParams, direction="write"
                ),
                "idempotency_key": idempotency_key,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UpsertLocationCustomAttributeResponse,
                    construct_type(
                        type_=UpsertLocationCustomAttributeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, location_id: str, key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[DeleteLocationCustomAttributeResponse]:
        """
        Deletes a [custom attribute](entity:CustomAttribute) associated with a location.
        To delete a custom attribute owned by another application, the `visibility` setting must be
        `VISIBILITY_READ_WRITE_VALUES`.

        Parameters
        ----------
        location_id : str
            The ID of the target [location](entity:Location).

        key : str
            The key of the custom attribute to delete. This key must match the `key` of a custom
            attribute definition in the Square seller account. If the requesting application is not the
            definition owner, you must use the qualified key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DeleteLocationCustomAttributeResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/locations/{jsonable_encoder(location_id)}/custom-attributes/{jsonable_encoder(key)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteLocationCustomAttributeResponse,
                    construct_type(
                        type_=DeleteLocationCustomAttributeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
