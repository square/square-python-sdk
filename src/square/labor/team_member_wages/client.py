# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.pagination import AsyncPager, SyncPager
from ...core.request_options import RequestOptions
from ...types.get_team_member_wage_response import GetTeamMemberWageResponse
from ...types.team_member_wage import TeamMemberWage
from .raw_client import AsyncRawTeamMemberWagesClient, RawTeamMemberWagesClient


class TeamMemberWagesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTeamMemberWagesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTeamMemberWagesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTeamMemberWagesClient
        """
        return self._raw_client

    def list(
        self,
        *,
        team_member_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[TeamMemberWage]:
        """
        Returns a paginated list of `TeamMemberWage` instances for a business.

        Parameters
        ----------
        team_member_id : typing.Optional[str]
            Filter the returned wages to only those that are associated with the
            specified team member.

        limit : typing.Optional[int]
            The maximum number of `TeamMemberWage` results to return per page. The number can range between
            1 and 200. The default is 200.

        cursor : typing.Optional[str]
            A pointer to the next page of `EmployeeWage` results to fetch.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[TeamMemberWage]
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        response = client.labor.team_member_wages.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.list(
            team_member_id=team_member_id, limit=limit, cursor=cursor, request_options=request_options
        )

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetTeamMemberWageResponse:
        """
        Returns a single `TeamMemberWage` specified by `id`.

        Parameters
        ----------
        id : str
            The UUID for the `TeamMemberWage` being retrieved.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetTeamMemberWageResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.team_member_wages.get(
            id="id",
        )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data


class AsyncTeamMemberWagesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTeamMemberWagesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTeamMemberWagesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTeamMemberWagesClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        team_member_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[TeamMemberWage]:
        """
        Returns a paginated list of `TeamMemberWage` instances for a business.

        Parameters
        ----------
        team_member_id : typing.Optional[str]
            Filter the returned wages to only those that are associated with the
            specified team member.

        limit : typing.Optional[int]
            The maximum number of `TeamMemberWage` results to return per page. The number can range between
            1 and 200. The default is 200.

        cursor : typing.Optional[str]
            A pointer to the next page of `EmployeeWage` results to fetch.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[TeamMemberWage]
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.labor.team_member_wages.list()
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        return await self._raw_client.list(
            team_member_id=team_member_id, limit=limit, cursor=cursor, request_options=request_options
        )

    async def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetTeamMemberWageResponse:
        """
        Returns a single `TeamMemberWage` specified by `id`.

        Parameters
        ----------
        id : str
            The UUID for the `TeamMemberWage` being retrieved.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetTeamMemberWageResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.team_member_wages.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data
