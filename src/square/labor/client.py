# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawLaborClient
from .break_types.client import BreakTypesClient
from .employee_wages.client import EmployeeWagesClient
from .shifts.client import ShiftsClient
from .team_member_wages.client import TeamMemberWagesClient
from .workweek_configs.client import WorkweekConfigsClient
from ..requests.scheduled_shift import ScheduledShiftParams
from ..core.request_options import RequestOptions
from ..types.create_scheduled_shift_response import CreateScheduledShiftResponse
from ..requests.bulk_publish_scheduled_shifts_data import BulkPublishScheduledShiftsDataParams
from ..types.scheduled_shift_notification_audience import ScheduledShiftNotificationAudience
from ..types.bulk_publish_scheduled_shifts_response import BulkPublishScheduledShiftsResponse
from ..requests.scheduled_shift_query import ScheduledShiftQueryParams
from ..types.search_scheduled_shifts_response import SearchScheduledShiftsResponse
from ..types.retrieve_scheduled_shift_response import RetrieveScheduledShiftResponse
from ..types.update_scheduled_shift_response import UpdateScheduledShiftResponse
from ..types.publish_scheduled_shift_response import PublishScheduledShiftResponse
from ..requests.timecard import TimecardParams
from ..types.create_timecard_response import CreateTimecardResponse
from ..requests.timecard_query import TimecardQueryParams
from ..types.search_timecards_response import SearchTimecardsResponse
from ..types.retrieve_timecard_response import RetrieveTimecardResponse
from ..types.update_timecard_response import UpdateTimecardResponse
from ..types.delete_timecard_response import DeleteTimecardResponse
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawLaborClient
from .break_types.client import AsyncBreakTypesClient
from .employee_wages.client import AsyncEmployeeWagesClient
from .shifts.client import AsyncShiftsClient
from .team_member_wages.client import AsyncTeamMemberWagesClient
from .workweek_configs.client import AsyncWorkweekConfigsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LaborClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawLaborClient(client_wrapper=client_wrapper)
        self.break_types = BreakTypesClient(client_wrapper=client_wrapper)

        self.employee_wages = EmployeeWagesClient(client_wrapper=client_wrapper)

        self.shifts = ShiftsClient(client_wrapper=client_wrapper)

        self.team_member_wages = TeamMemberWagesClient(client_wrapper=client_wrapper)

        self.workweek_configs = WorkweekConfigsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawLaborClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawLaborClient
        """
        return self._raw_client

    def create_scheduled_shift(
        self,
        *,
        scheduled_shift: ScheduledShiftParams,
        idempotency_key: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateScheduledShiftResponse:
        """
        Creates a scheduled shift by providing draft shift details such as job ID,
        team member assignment, and start and end times.

        The following `draft_shift_details` fields are required:
        - `location_id`
        - `job_id`
        - `start_at`
        - `end_at`

        Parameters
        ----------
        scheduled_shift : ScheduledShiftParams
            The scheduled shift with `draft_shift_details`.
            If needed, call [ListLocations](api-endpoint:Locations-ListLocations) to get location IDs,
            [ListJobs](api-endpoint:Team-ListJobs) to get job IDs, and [SearchTeamMembers](api-endpoint:Team-SearchTeamMembers)
            to get team member IDs and current job assignments.

            The `start_at` and `end_at` timestamps must be provided in the time zone + offset of the
            shift location specified in `location_id`. Example for Pacific Standard Time: 2024-10-31T12:30:00-08:00

        idempotency_key : typing.Optional[str]
            A unique identifier for the `CreateScheduledShift` request, used to ensure the
            [idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency)
            of the operation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateScheduledShiftResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.create_scheduled_shift(
            idempotency_key="HIDSNG5KS478L",
            scheduled_shift={
                "draft_shift_details": {
                    "team_member_id": "ormj0jJJZ5OZIzxrZYJI",
                    "location_id": "PAA1RJZZKXBFG",
                    "job_id": "FzbJAtt9qEWncK1BWgVCxQ6M",
                    "start_at": "2019-01-25T03:11:00-05:00",
                    "end_at": "2019-01-25T13:11:00-05:00",
                    "notes": "Dont forget to prep the vegetables",
                    "is_deleted": False,
                }
            },
        )
        """
        response = self._raw_client.create_scheduled_shift(
            scheduled_shift=scheduled_shift, idempotency_key=idempotency_key, request_options=request_options
        )
        return response.data

    def bulk_publish_scheduled_shifts(
        self,
        *,
        scheduled_shifts: typing.Dict[str, BulkPublishScheduledShiftsDataParams],
        scheduled_shift_notification_audience: typing.Optional[ScheduledShiftNotificationAudience] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkPublishScheduledShiftsResponse:
        """
        Publishes 1 - 100 scheduled shifts. This endpoint takes a map of individual publish
        requests and returns a map of responses. When a scheduled shift is published, Square keeps
        the `draft_shift_details` field as is and copies it to the `published_shift_details` field.

        The minimum `start_at` and maximum `end_at` timestamps of all shifts in a
        `BulkPublishScheduledShifts` request must fall within a two-week period.

        Parameters
        ----------
        scheduled_shifts : typing.Dict[str, BulkPublishScheduledShiftsDataParams]
            A map of 1 to 100 key-value pairs that represent individual publish requests.

            - Each key is the ID of a scheduled shift you want to publish.
            - Each value is a `BulkPublishScheduledShiftsData` object that contains the
            `version` field or is an empty object.

        scheduled_shift_notification_audience : typing.Optional[ScheduledShiftNotificationAudience]
            Indicates whether Square should send email notifications to team members and
            which team members should receive the notifications. This setting applies to all shifts
            specified in the bulk operation. The default value is `AFFECTED`.
            See [ScheduledShiftNotificationAudience](#type-scheduledshiftnotificationaudience) for possible values

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkPublishScheduledShiftsResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.bulk_publish_scheduled_shifts(
            scheduled_shifts={"key": {}},
            scheduled_shift_notification_audience="AFFECTED",
        )
        """
        response = self._raw_client.bulk_publish_scheduled_shifts(
            scheduled_shifts=scheduled_shifts,
            scheduled_shift_notification_audience=scheduled_shift_notification_audience,
            request_options=request_options,
        )
        return response.data

    def search_scheduled_shifts(
        self,
        *,
        query: typing.Optional[ScheduledShiftQueryParams] = OMIT,
        limit: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchScheduledShiftsResponse:
        """
        Returns a paginated list of scheduled shifts, with optional filter and sort settings.
        By default, results are sorted by `start_at` in ascending order.

        Parameters
        ----------
        query : typing.Optional[ScheduledShiftQueryParams]
            Query conditions used to filter and sort the results.

        limit : typing.Optional[int]
            The maximum number of results to return in a single response page. The default value is 50.

        cursor : typing.Optional[str]
            The pagination cursor returned by the previous call to this endpoint. Provide
            this cursor to retrieve the next page of results for your original request. For more
            information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchScheduledShiftsResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.search_scheduled_shifts(
            query={
                "filter": {"assignment_status": "ASSIGNED"},
                "sort": {"field": "CREATED_AT", "order": "ASC"},
            },
            limit=2,
            cursor="xoxp-1234-5678-90123",
        )
        """
        response = self._raw_client.search_scheduled_shifts(
            query=query, limit=limit, cursor=cursor, request_options=request_options
        )
        return response.data

    def retrieve_scheduled_shift(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RetrieveScheduledShiftResponse:
        """
        Retrieves a scheduled shift by ID.

        Parameters
        ----------
        id : str
            The ID of the scheduled shift to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RetrieveScheduledShiftResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.retrieve_scheduled_shift(
            id="id",
        )
        """
        response = self._raw_client.retrieve_scheduled_shift(id, request_options=request_options)
        return response.data

    def update_scheduled_shift(
        self, id: str, *, scheduled_shift: ScheduledShiftParams, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateScheduledShiftResponse:
        """
        Updates the draft shift details for a scheduled shift. This endpoint supports
        sparse updates, so only new, changed, or removed fields are required in the request.
        You must publish the shift to make updates public.

        You can make the following updates to `draft_shift_details`:
        - Change the `location_id`, `job_id`, `start_at`, and `end_at` fields.
        - Add, change, or clear the `team_member_id` and `notes` fields. To clear these fields,
        set the value to null.
        - Change the `is_deleted` field. To delete a scheduled shift, set `is_deleted` to true
        and then publish the shift.

        Parameters
        ----------
        id : str
            The ID of the scheduled shift to update.

        scheduled_shift : ScheduledShiftParams
            The scheduled shift with any updates in the `draft_shift_details` field.
            If needed, call [ListLocations](api-endpoint:Locations-ListLocations) to get location IDs,
            [ListJobs](api-endpoint:Team-ListJobs) to get job IDs, and [SearchTeamMembers](api-endpoint:Team-SearchTeamMembers)
            to get team member IDs and current job assignments. Updates made to `published_shift_details`
            are ignored.

            If provided, the `start_at` and `end_at` timestamps must be in the time zone + offset of the
            shift location specified in `location_id`. Example for Pacific Standard Time: 2024-10-31T12:30:00-08:00

            To enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency)
            control for the request, provide the current version of the shift in the `version` field.
            If the provided version doesn't match the server version, the request fails. If `version` is
            omitted, Square executes a blind write, potentially overwriting data from another publish request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateScheduledShiftResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.update_scheduled_shift(
            id="id",
            scheduled_shift={
                "draft_shift_details": {
                    "team_member_id": "ormj0jJJZ5OZIzxrZYJI",
                    "location_id": "PAA1RJZZKXBFG",
                    "job_id": "FzbJAtt9qEWncK1BWgVCxQ6M",
                    "start_at": "2019-03-25T03:11:00-05:00",
                    "end_at": "2019-03-25T13:18:00-05:00",
                    "notes": "Dont forget to prep the vegetables",
                    "is_deleted": False,
                },
                "version": 1,
            },
        )
        """
        response = self._raw_client.update_scheduled_shift(
            id, scheduled_shift=scheduled_shift, request_options=request_options
        )
        return response.data

    def publish_scheduled_shift(
        self,
        id: str,
        *,
        idempotency_key: str,
        version: typing.Optional[int] = OMIT,
        scheduled_shift_notification_audience: typing.Optional[ScheduledShiftNotificationAudience] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PublishScheduledShiftResponse:
        """
        Publishes a scheduled shift. When a scheduled shift is published, Square keeps the
        `draft_shift_details` field as is and copies it to the `published_shift_details` field.

        Parameters
        ----------
        id : str
            The ID of the scheduled shift to publish.

        idempotency_key : str
            A unique identifier for the `PublishScheduledShift` request, used to ensure the
            [idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency)
            of the operation.

        version : typing.Optional[int]
            The current version of the scheduled shift, used to enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency)
            control. If the provided version doesn't match the server version, the request fails.
            If omitted, Square executes a blind write, potentially overwriting data from another publish request.

        scheduled_shift_notification_audience : typing.Optional[ScheduledShiftNotificationAudience]
            Indicates whether Square should send an email notification to team members and
            which team members should receive the notification. The default value is `AFFECTED`.
            See [ScheduledShiftNotificationAudience](#type-scheduledshiftnotificationaudience) for possible values

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PublishScheduledShiftResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.publish_scheduled_shift(
            id="id",
            idempotency_key="HIDSNG5KS478L",
            version=2,
            scheduled_shift_notification_audience="ALL",
        )
        """
        response = self._raw_client.publish_scheduled_shift(
            id,
            idempotency_key=idempotency_key,
            version=version,
            scheduled_shift_notification_audience=scheduled_shift_notification_audience,
            request_options=request_options,
        )
        return response.data

    def create_timecard(
        self,
        *,
        timecard: TimecardParams,
        idempotency_key: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateTimecardResponse:
        """
        Creates a new `Timecard`.

        A `Timecard` represents a complete workday for a single team member.
        You must provide the following values in your request to this
        endpoint:

        - `location_id`
        - `team_member_id`
        - `start_at`

        An attempt to create a new `Timecard` can result in a `BAD_REQUEST` error when:
        - The `status` of the new `Timecard` is `OPEN` and the team member has another
        timecard with an `OPEN` status.
        - The `start_at` date is in the future.
        - The `start_at` or `end_at` date overlaps another timecard for the same team member.
        - The `Break` instances are set in the request and a break `start_at`
        is before the `Timecard.start_at`, a break `end_at` is after
        the `Timecard.end_at`, or both.

        Parameters
        ----------
        timecard : TimecardParams
            The `Timecard` to be created.

        idempotency_key : typing.Optional[str]
            A unique string value to ensure the idempotency of the operation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTimecardResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.create_timecard(
            idempotency_key="HIDSNG5KS478L",
            timecard={
                "location_id": "PAA1RJZZKXBFG",
                "start_at": "2019-01-25T03:11:00-05:00",
                "end_at": "2019-01-25T13:11:00-05:00",
                "wage": {
                    "title": "Barista",
                    "hourly_rate": {"amount": 1100, "currency": "USD"},
                    "tip_eligible": True,
                },
                "breaks": [
                    {
                        "start_at": "2019-01-25T06:11:00-05:00",
                        "end_at": "2019-01-25T06:16:00-05:00",
                        "break_type_id": "REGS1EQR1TPZ5",
                        "name": "Tea Break",
                        "expected_duration": "PT5M",
                        "is_paid": True,
                    }
                ],
                "team_member_id": "ormj0jJJZ5OZIzxrZYJI",
                "declared_cash_tip_money": {"amount": 500, "currency": "USD"},
            },
        )
        """
        response = self._raw_client.create_timecard(
            timecard=timecard, idempotency_key=idempotency_key, request_options=request_options
        )
        return response.data

    def search_timecards(
        self,
        *,
        query: typing.Optional[TimecardQueryParams] = OMIT,
        limit: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchTimecardsResponse:
        """
        Returns a paginated list of `Timecard` records for a business.
        The list to be returned can be filtered by:
        - Location IDs
        - Team member IDs
        - Timecard status (`OPEN` or `CLOSED`)
        - Timecard start
        - Timecard end
        - Workday details

        The list can be sorted by:
        - `START_AT`
        - `END_AT`
        - `CREATED_AT`
        - `UPDATED_AT`

        Parameters
        ----------
        query : typing.Optional[TimecardQueryParams]
            Query filters.

        limit : typing.Optional[int]
            The number of resources in a page (200 by default).

        cursor : typing.Optional[str]
            An opaque cursor for fetching the next page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchTimecardsResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.search_timecards(
            query={
                "filter": {
                    "workday": {
                        "date_range": {
                            "start_date": "2019-01-20",
                            "end_date": "2019-02-03",
                        },
                        "match_timecards_by": "START_AT",
                        "default_timezone": "America/Los_Angeles",
                    }
                }
            },
            limit=100,
        )
        """
        response = self._raw_client.search_timecards(
            query=query, limit=limit, cursor=cursor, request_options=request_options
        )
        return response.data

    def retrieve_timecard(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RetrieveTimecardResponse:
        """
        Returns a single `Timecard` specified by `id`.

        Parameters
        ----------
        id : str
            The UUID for the `Timecard` being retrieved.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RetrieveTimecardResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.retrieve_timecard(
            id="id",
        )
        """
        response = self._raw_client.retrieve_timecard(id, request_options=request_options)
        return response.data

    def update_timecard(
        self, id: str, *, timecard: TimecardParams, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateTimecardResponse:
        """
        Updates an existing `Timecard`.

        When adding a `Break` to a `Timecard`, any earlier `Break` instances in the `Timecard` have
        the `end_at` property set to a valid RFC-3339 datetime string.

        When closing a `Timecard`, all `Break` instances in the `Timecard` must be complete with `end_at`
        set on each `Break`.

        Parameters
        ----------
        id : str
            The ID of the object being updated.

        timecard : TimecardParams
            The updated `Timecard` object.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateTimecardResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.update_timecard(
            id="id",
            timecard={
                "location_id": "PAA1RJZZKXBFG",
                "start_at": "2019-01-25T03:11:00-05:00",
                "end_at": "2019-01-25T13:11:00-05:00",
                "wage": {
                    "title": "Bartender",
                    "hourly_rate": {"amount": 1500, "currency": "USD"},
                    "tip_eligible": True,
                },
                "breaks": [
                    {
                        "id": "X7GAQYVVRRG6P",
                        "start_at": "2019-01-25T06:11:00-05:00",
                        "end_at": "2019-01-25T06:16:00-05:00",
                        "break_type_id": "REGS1EQR1TPZ5",
                        "name": "Tea Break",
                        "expected_duration": "PT5M",
                        "is_paid": True,
                    }
                ],
                "status": "CLOSED",
                "version": 1,
                "team_member_id": "ormj0jJJZ5OZIzxrZYJI",
                "declared_cash_tip_money": {"amount": 500, "currency": "USD"},
            },
        )
        """
        response = self._raw_client.update_timecard(id, timecard=timecard, request_options=request_options)
        return response.data

    def delete_timecard(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteTimecardResponse:
        """
        Deletes a `Timecard`.

        Parameters
        ----------
        id : str
            The UUID for the `Timecard` being deleted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteTimecardResponse
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        client.labor.delete_timecard(
            id="id",
        )
        """
        response = self._raw_client.delete_timecard(id, request_options=request_options)
        return response.data


class AsyncLaborClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawLaborClient(client_wrapper=client_wrapper)
        self.break_types = AsyncBreakTypesClient(client_wrapper=client_wrapper)

        self.employee_wages = AsyncEmployeeWagesClient(client_wrapper=client_wrapper)

        self.shifts = AsyncShiftsClient(client_wrapper=client_wrapper)

        self.team_member_wages = AsyncTeamMemberWagesClient(client_wrapper=client_wrapper)

        self.workweek_configs = AsyncWorkweekConfigsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawLaborClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawLaborClient
        """
        return self._raw_client

    async def create_scheduled_shift(
        self,
        *,
        scheduled_shift: ScheduledShiftParams,
        idempotency_key: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateScheduledShiftResponse:
        """
        Creates a scheduled shift by providing draft shift details such as job ID,
        team member assignment, and start and end times.

        The following `draft_shift_details` fields are required:
        - `location_id`
        - `job_id`
        - `start_at`
        - `end_at`

        Parameters
        ----------
        scheduled_shift : ScheduledShiftParams
            The scheduled shift with `draft_shift_details`.
            If needed, call [ListLocations](api-endpoint:Locations-ListLocations) to get location IDs,
            [ListJobs](api-endpoint:Team-ListJobs) to get job IDs, and [SearchTeamMembers](api-endpoint:Team-SearchTeamMembers)
            to get team member IDs and current job assignments.

            The `start_at` and `end_at` timestamps must be provided in the time zone + offset of the
            shift location specified in `location_id`. Example for Pacific Standard Time: 2024-10-31T12:30:00-08:00

        idempotency_key : typing.Optional[str]
            A unique identifier for the `CreateScheduledShift` request, used to ensure the
            [idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency)
            of the operation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateScheduledShiftResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.create_scheduled_shift(
                idempotency_key="HIDSNG5KS478L",
                scheduled_shift={
                    "draft_shift_details": {
                        "team_member_id": "ormj0jJJZ5OZIzxrZYJI",
                        "location_id": "PAA1RJZZKXBFG",
                        "job_id": "FzbJAtt9qEWncK1BWgVCxQ6M",
                        "start_at": "2019-01-25T03:11:00-05:00",
                        "end_at": "2019-01-25T13:11:00-05:00",
                        "notes": "Dont forget to prep the vegetables",
                        "is_deleted": False,
                    }
                },
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_scheduled_shift(
            scheduled_shift=scheduled_shift, idempotency_key=idempotency_key, request_options=request_options
        )
        return response.data

    async def bulk_publish_scheduled_shifts(
        self,
        *,
        scheduled_shifts: typing.Dict[str, BulkPublishScheduledShiftsDataParams],
        scheduled_shift_notification_audience: typing.Optional[ScheduledShiftNotificationAudience] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkPublishScheduledShiftsResponse:
        """
        Publishes 1 - 100 scheduled shifts. This endpoint takes a map of individual publish
        requests and returns a map of responses. When a scheduled shift is published, Square keeps
        the `draft_shift_details` field as is and copies it to the `published_shift_details` field.

        The minimum `start_at` and maximum `end_at` timestamps of all shifts in a
        `BulkPublishScheduledShifts` request must fall within a two-week period.

        Parameters
        ----------
        scheduled_shifts : typing.Dict[str, BulkPublishScheduledShiftsDataParams]
            A map of 1 to 100 key-value pairs that represent individual publish requests.

            - Each key is the ID of a scheduled shift you want to publish.
            - Each value is a `BulkPublishScheduledShiftsData` object that contains the
            `version` field or is an empty object.

        scheduled_shift_notification_audience : typing.Optional[ScheduledShiftNotificationAudience]
            Indicates whether Square should send email notifications to team members and
            which team members should receive the notifications. This setting applies to all shifts
            specified in the bulk operation. The default value is `AFFECTED`.
            See [ScheduledShiftNotificationAudience](#type-scheduledshiftnotificationaudience) for possible values

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkPublishScheduledShiftsResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.bulk_publish_scheduled_shifts(
                scheduled_shifts={"key": {}},
                scheduled_shift_notification_audience="AFFECTED",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.bulk_publish_scheduled_shifts(
            scheduled_shifts=scheduled_shifts,
            scheduled_shift_notification_audience=scheduled_shift_notification_audience,
            request_options=request_options,
        )
        return response.data

    async def search_scheduled_shifts(
        self,
        *,
        query: typing.Optional[ScheduledShiftQueryParams] = OMIT,
        limit: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchScheduledShiftsResponse:
        """
        Returns a paginated list of scheduled shifts, with optional filter and sort settings.
        By default, results are sorted by `start_at` in ascending order.

        Parameters
        ----------
        query : typing.Optional[ScheduledShiftQueryParams]
            Query conditions used to filter and sort the results.

        limit : typing.Optional[int]
            The maximum number of results to return in a single response page. The default value is 50.

        cursor : typing.Optional[str]
            The pagination cursor returned by the previous call to this endpoint. Provide
            this cursor to retrieve the next page of results for your original request. For more
            information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchScheduledShiftsResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.search_scheduled_shifts(
                query={
                    "filter": {"assignment_status": "ASSIGNED"},
                    "sort": {"field": "CREATED_AT", "order": "ASC"},
                },
                limit=2,
                cursor="xoxp-1234-5678-90123",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.search_scheduled_shifts(
            query=query, limit=limit, cursor=cursor, request_options=request_options
        )
        return response.data

    async def retrieve_scheduled_shift(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RetrieveScheduledShiftResponse:
        """
        Retrieves a scheduled shift by ID.

        Parameters
        ----------
        id : str
            The ID of the scheduled shift to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RetrieveScheduledShiftResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.retrieve_scheduled_shift(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.retrieve_scheduled_shift(id, request_options=request_options)
        return response.data

    async def update_scheduled_shift(
        self, id: str, *, scheduled_shift: ScheduledShiftParams, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateScheduledShiftResponse:
        """
        Updates the draft shift details for a scheduled shift. This endpoint supports
        sparse updates, so only new, changed, or removed fields are required in the request.
        You must publish the shift to make updates public.

        You can make the following updates to `draft_shift_details`:
        - Change the `location_id`, `job_id`, `start_at`, and `end_at` fields.
        - Add, change, or clear the `team_member_id` and `notes` fields. To clear these fields,
        set the value to null.
        - Change the `is_deleted` field. To delete a scheduled shift, set `is_deleted` to true
        and then publish the shift.

        Parameters
        ----------
        id : str
            The ID of the scheduled shift to update.

        scheduled_shift : ScheduledShiftParams
            The scheduled shift with any updates in the `draft_shift_details` field.
            If needed, call [ListLocations](api-endpoint:Locations-ListLocations) to get location IDs,
            [ListJobs](api-endpoint:Team-ListJobs) to get job IDs, and [SearchTeamMembers](api-endpoint:Team-SearchTeamMembers)
            to get team member IDs and current job assignments. Updates made to `published_shift_details`
            are ignored.

            If provided, the `start_at` and `end_at` timestamps must be in the time zone + offset of the
            shift location specified in `location_id`. Example for Pacific Standard Time: 2024-10-31T12:30:00-08:00

            To enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency)
            control for the request, provide the current version of the shift in the `version` field.
            If the provided version doesn't match the server version, the request fails. If `version` is
            omitted, Square executes a blind write, potentially overwriting data from another publish request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateScheduledShiftResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.update_scheduled_shift(
                id="id",
                scheduled_shift={
                    "draft_shift_details": {
                        "team_member_id": "ormj0jJJZ5OZIzxrZYJI",
                        "location_id": "PAA1RJZZKXBFG",
                        "job_id": "FzbJAtt9qEWncK1BWgVCxQ6M",
                        "start_at": "2019-03-25T03:11:00-05:00",
                        "end_at": "2019-03-25T13:18:00-05:00",
                        "notes": "Dont forget to prep the vegetables",
                        "is_deleted": False,
                    },
                    "version": 1,
                },
            )


        asyncio.run(main())
        """
        response = await self._raw_client.update_scheduled_shift(
            id, scheduled_shift=scheduled_shift, request_options=request_options
        )
        return response.data

    async def publish_scheduled_shift(
        self,
        id: str,
        *,
        idempotency_key: str,
        version: typing.Optional[int] = OMIT,
        scheduled_shift_notification_audience: typing.Optional[ScheduledShiftNotificationAudience] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PublishScheduledShiftResponse:
        """
        Publishes a scheduled shift. When a scheduled shift is published, Square keeps the
        `draft_shift_details` field as is and copies it to the `published_shift_details` field.

        Parameters
        ----------
        id : str
            The ID of the scheduled shift to publish.

        idempotency_key : str
            A unique identifier for the `PublishScheduledShift` request, used to ensure the
            [idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency)
            of the operation.

        version : typing.Optional[int]
            The current version of the scheduled shift, used to enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency)
            control. If the provided version doesn't match the server version, the request fails.
            If omitted, Square executes a blind write, potentially overwriting data from another publish request.

        scheduled_shift_notification_audience : typing.Optional[ScheduledShiftNotificationAudience]
            Indicates whether Square should send an email notification to team members and
            which team members should receive the notification. The default value is `AFFECTED`.
            See [ScheduledShiftNotificationAudience](#type-scheduledshiftnotificationaudience) for possible values

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PublishScheduledShiftResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.publish_scheduled_shift(
                id="id",
                idempotency_key="HIDSNG5KS478L",
                version=2,
                scheduled_shift_notification_audience="ALL",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.publish_scheduled_shift(
            id,
            idempotency_key=idempotency_key,
            version=version,
            scheduled_shift_notification_audience=scheduled_shift_notification_audience,
            request_options=request_options,
        )
        return response.data

    async def create_timecard(
        self,
        *,
        timecard: TimecardParams,
        idempotency_key: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateTimecardResponse:
        """
        Creates a new `Timecard`.

        A `Timecard` represents a complete workday for a single team member.
        You must provide the following values in your request to this
        endpoint:

        - `location_id`
        - `team_member_id`
        - `start_at`

        An attempt to create a new `Timecard` can result in a `BAD_REQUEST` error when:
        - The `status` of the new `Timecard` is `OPEN` and the team member has another
        timecard with an `OPEN` status.
        - The `start_at` date is in the future.
        - The `start_at` or `end_at` date overlaps another timecard for the same team member.
        - The `Break` instances are set in the request and a break `start_at`
        is before the `Timecard.start_at`, a break `end_at` is after
        the `Timecard.end_at`, or both.

        Parameters
        ----------
        timecard : TimecardParams
            The `Timecard` to be created.

        idempotency_key : typing.Optional[str]
            A unique string value to ensure the idempotency of the operation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTimecardResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.create_timecard(
                idempotency_key="HIDSNG5KS478L",
                timecard={
                    "location_id": "PAA1RJZZKXBFG",
                    "start_at": "2019-01-25T03:11:00-05:00",
                    "end_at": "2019-01-25T13:11:00-05:00",
                    "wage": {
                        "title": "Barista",
                        "hourly_rate": {"amount": 1100, "currency": "USD"},
                        "tip_eligible": True,
                    },
                    "breaks": [
                        {
                            "start_at": "2019-01-25T06:11:00-05:00",
                            "end_at": "2019-01-25T06:16:00-05:00",
                            "break_type_id": "REGS1EQR1TPZ5",
                            "name": "Tea Break",
                            "expected_duration": "PT5M",
                            "is_paid": True,
                        }
                    ],
                    "team_member_id": "ormj0jJJZ5OZIzxrZYJI",
                    "declared_cash_tip_money": {"amount": 500, "currency": "USD"},
                },
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_timecard(
            timecard=timecard, idempotency_key=idempotency_key, request_options=request_options
        )
        return response.data

    async def search_timecards(
        self,
        *,
        query: typing.Optional[TimecardQueryParams] = OMIT,
        limit: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchTimecardsResponse:
        """
        Returns a paginated list of `Timecard` records for a business.
        The list to be returned can be filtered by:
        - Location IDs
        - Team member IDs
        - Timecard status (`OPEN` or `CLOSED`)
        - Timecard start
        - Timecard end
        - Workday details

        The list can be sorted by:
        - `START_AT`
        - `END_AT`
        - `CREATED_AT`
        - `UPDATED_AT`

        Parameters
        ----------
        query : typing.Optional[TimecardQueryParams]
            Query filters.

        limit : typing.Optional[int]
            The number of resources in a page (200 by default).

        cursor : typing.Optional[str]
            An opaque cursor for fetching the next page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchTimecardsResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.search_timecards(
                query={
                    "filter": {
                        "workday": {
                            "date_range": {
                                "start_date": "2019-01-20",
                                "end_date": "2019-02-03",
                            },
                            "match_timecards_by": "START_AT",
                            "default_timezone": "America/Los_Angeles",
                        }
                    }
                },
                limit=100,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.search_timecards(
            query=query, limit=limit, cursor=cursor, request_options=request_options
        )
        return response.data

    async def retrieve_timecard(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RetrieveTimecardResponse:
        """
        Returns a single `Timecard` specified by `id`.

        Parameters
        ----------
        id : str
            The UUID for the `Timecard` being retrieved.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RetrieveTimecardResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.retrieve_timecard(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.retrieve_timecard(id, request_options=request_options)
        return response.data

    async def update_timecard(
        self, id: str, *, timecard: TimecardParams, request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateTimecardResponse:
        """
        Updates an existing `Timecard`.

        When adding a `Break` to a `Timecard`, any earlier `Break` instances in the `Timecard` have
        the `end_at` property set to a valid RFC-3339 datetime string.

        When closing a `Timecard`, all `Break` instances in the `Timecard` must be complete with `end_at`
        set on each `Break`.

        Parameters
        ----------
        id : str
            The ID of the object being updated.

        timecard : TimecardParams
            The updated `Timecard` object.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateTimecardResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.update_timecard(
                id="id",
                timecard={
                    "location_id": "PAA1RJZZKXBFG",
                    "start_at": "2019-01-25T03:11:00-05:00",
                    "end_at": "2019-01-25T13:11:00-05:00",
                    "wage": {
                        "title": "Bartender",
                        "hourly_rate": {"amount": 1500, "currency": "USD"},
                        "tip_eligible": True,
                    },
                    "breaks": [
                        {
                            "id": "X7GAQYVVRRG6P",
                            "start_at": "2019-01-25T06:11:00-05:00",
                            "end_at": "2019-01-25T06:16:00-05:00",
                            "break_type_id": "REGS1EQR1TPZ5",
                            "name": "Tea Break",
                            "expected_duration": "PT5M",
                            "is_paid": True,
                        }
                    ],
                    "status": "CLOSED",
                    "version": 1,
                    "team_member_id": "ormj0jJJZ5OZIzxrZYJI",
                    "declared_cash_tip_money": {"amount": 500, "currency": "USD"},
                },
            )


        asyncio.run(main())
        """
        response = await self._raw_client.update_timecard(id, timecard=timecard, request_options=request_options)
        return response.data

    async def delete_timecard(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteTimecardResponse:
        """
        Deletes a `Timecard`.

        Parameters
        ----------
        id : str
            The UUID for the `Timecard` being deleted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteTimecardResponse
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.labor.delete_timecard(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.delete_timecard(id, request_options=request_options)
        return response.data
