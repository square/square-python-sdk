# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...core.request_options import RequestOptions
from ...core.http_response import HttpResponse
from ...types.list_loyalty_programs_response import ListLoyaltyProgramsResponse
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.get_loyalty_program_response import GetLoyaltyProgramResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...requests.money import MoneyParams
from ...types.calculate_loyalty_points_response import CalculateLoyaltyPointsResponse
from ...core.serialization import convert_and_respect_annotation_metadata
from ...core.client_wrapper import AsyncClientWrapper
from ...core.http_response import AsyncHttpResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawProgramsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[ListLoyaltyProgramsResponse]:
        """
        Returns a list of loyalty programs in the seller's account.
        Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).


        Replaced with [RetrieveLoyaltyProgram](api-endpoint:Loyalty-RetrieveLoyaltyProgram) when used with the keyword `main`.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ListLoyaltyProgramsResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/loyalty/programs",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListLoyaltyProgramsResponse,
                    construct_type(
                        type_=ListLoyaltyProgramsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, program_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetLoyaltyProgramResponse]:
        """
        Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword `main`.

        Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).

        Parameters
        ----------
        program_id : str
            The ID of the loyalty program or the keyword `main`. Either value can be used to retrieve the single loyalty program that belongs to the seller.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetLoyaltyProgramResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/loyalty/programs/{jsonable_encoder(program_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetLoyaltyProgramResponse,
                    construct_type(
                        type_=GetLoyaltyProgramResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def calculate(
        self,
        program_id: str,
        *,
        order_id: typing.Optional[str] = OMIT,
        transaction_amount_money: typing.Optional[MoneyParams] = OMIT,
        loyalty_account_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CalculateLoyaltyPointsResponse]:
        """
        Calculates the number of points a buyer can earn from a purchase. Applications might call this endpoint
        to display the points to the buyer.

        - If you are using the Orders API to manage orders, provide the `order_id` and (optional) `loyalty_account_id`.
        Square reads the order to compute the points earned from the base loyalty program and an associated
        [loyalty promotion](entity:LoyaltyPromotion).

        - If you are not using the Orders API to manage orders, provide `transaction_amount_money` with the
        purchase amount. Square uses this amount to calculate the points earned from the base loyalty program,
        but not points earned from a loyalty promotion. For spend-based and visit-based programs, the `tax_mode`
        setting of the accrual rule indicates how taxes should be treated for loyalty points accrual.
        If the purchase qualifies for program points, call
        [ListLoyaltyPromotions](api-endpoint:Loyalty-ListLoyaltyPromotions) and perform a client-side computation
        to calculate whether the purchase also qualifies for promotion points. For more information, see
        [Calculating promotion points](https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points).

        Parameters
        ----------
        program_id : str
            The ID of the [loyalty program](entity:LoyaltyProgram), which defines the rules for accruing points.

        order_id : typing.Optional[str]
            The [order](entity:Order) ID for which to calculate the points.
            Specify this field if your application uses the Orders API to process orders.
            Otherwise, specify the `transaction_amount_money`.

        transaction_amount_money : typing.Optional[MoneyParams]
            The purchase amount for which to calculate the points.
            Specify this field if your application does not use the Orders API to process orders.
            Otherwise, specify the `order_id`.

        loyalty_account_id : typing.Optional[str]
            The ID of the target [loyalty account](entity:LoyaltyAccount). Optionally specify this field
            if your application uses the Orders API to process orders.

            If specified, the `promotion_points` field in the response shows the number of points the buyer would
            earn from the purchase. In this case, Square uses the account ID to determine whether the promotion's
            `trigger_limit` (the maximum number of times that a buyer can trigger the promotion) has been reached.
            If not specified, the `promotion_points` field shows the number of points the purchase qualifies
            for regardless of the trigger limit.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CalculateLoyaltyPointsResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/loyalty/programs/{jsonable_encoder(program_id)}/calculate",
            method="POST",
            json={
                "order_id": order_id,
                "transaction_amount_money": convert_and_respect_annotation_metadata(
                    object_=transaction_amount_money, annotation=MoneyParams, direction="write"
                ),
                "loyalty_account_id": loyalty_account_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CalculateLoyaltyPointsResponse,
                    construct_type(
                        type_=CalculateLoyaltyPointsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawProgramsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[ListLoyaltyProgramsResponse]:
        """
        Returns a list of loyalty programs in the seller's account.
        Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).


        Replaced with [RetrieveLoyaltyProgram](api-endpoint:Loyalty-RetrieveLoyaltyProgram) when used with the keyword `main`.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ListLoyaltyProgramsResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/loyalty/programs",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListLoyaltyProgramsResponse,
                    construct_type(
                        type_=ListLoyaltyProgramsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, program_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetLoyaltyProgramResponse]:
        """
        Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword `main`.

        Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).

        Parameters
        ----------
        program_id : str
            The ID of the loyalty program or the keyword `main`. Either value can be used to retrieve the single loyalty program that belongs to the seller.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetLoyaltyProgramResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/loyalty/programs/{jsonable_encoder(program_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetLoyaltyProgramResponse,
                    construct_type(
                        type_=GetLoyaltyProgramResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def calculate(
        self,
        program_id: str,
        *,
        order_id: typing.Optional[str] = OMIT,
        transaction_amount_money: typing.Optional[MoneyParams] = OMIT,
        loyalty_account_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CalculateLoyaltyPointsResponse]:
        """
        Calculates the number of points a buyer can earn from a purchase. Applications might call this endpoint
        to display the points to the buyer.

        - If you are using the Orders API to manage orders, provide the `order_id` and (optional) `loyalty_account_id`.
        Square reads the order to compute the points earned from the base loyalty program and an associated
        [loyalty promotion](entity:LoyaltyPromotion).

        - If you are not using the Orders API to manage orders, provide `transaction_amount_money` with the
        purchase amount. Square uses this amount to calculate the points earned from the base loyalty program,
        but not points earned from a loyalty promotion. For spend-based and visit-based programs, the `tax_mode`
        setting of the accrual rule indicates how taxes should be treated for loyalty points accrual.
        If the purchase qualifies for program points, call
        [ListLoyaltyPromotions](api-endpoint:Loyalty-ListLoyaltyPromotions) and perform a client-side computation
        to calculate whether the purchase also qualifies for promotion points. For more information, see
        [Calculating promotion points](https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points).

        Parameters
        ----------
        program_id : str
            The ID of the [loyalty program](entity:LoyaltyProgram), which defines the rules for accruing points.

        order_id : typing.Optional[str]
            The [order](entity:Order) ID for which to calculate the points.
            Specify this field if your application uses the Orders API to process orders.
            Otherwise, specify the `transaction_amount_money`.

        transaction_amount_money : typing.Optional[MoneyParams]
            The purchase amount for which to calculate the points.
            Specify this field if your application does not use the Orders API to process orders.
            Otherwise, specify the `order_id`.

        loyalty_account_id : typing.Optional[str]
            The ID of the target [loyalty account](entity:LoyaltyAccount). Optionally specify this field
            if your application uses the Orders API to process orders.

            If specified, the `promotion_points` field in the response shows the number of points the buyer would
            earn from the purchase. In this case, Square uses the account ID to determine whether the promotion's
            `trigger_limit` (the maximum number of times that a buyer can trigger the promotion) has been reached.
            If not specified, the `promotion_points` field shows the number of points the purchase qualifies
            for regardless of the trigger limit.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CalculateLoyaltyPointsResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/loyalty/programs/{jsonable_encoder(program_id)}/calculate",
            method="POST",
            json={
                "order_id": order_id,
                "transaction_amount_money": convert_and_respect_annotation_metadata(
                    object_=transaction_amount_money, annotation=MoneyParams, direction="write"
                ),
                "loyalty_account_id": loyalty_account_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CalculateLoyaltyPointsResponse,
                    construct_type(
                        type_=CalculateLoyaltyPointsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
