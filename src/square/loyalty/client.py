# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..requests.loyalty_event_query import LoyaltyEventQueryParams
from ..types.loyalty_event import LoyaltyEvent
from .raw_client import AsyncRawLoyaltyClient, RawLoyaltyClient

if typing.TYPE_CHECKING:
    from .accounts.client import AccountsClient, AsyncAccountsClient
    from .programs.client import AsyncProgramsClient, ProgramsClient
    from .rewards.client import AsyncRewardsClient, RewardsClient
# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LoyaltyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawLoyaltyClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._accounts: typing.Optional[AccountsClient] = None
        self._programs: typing.Optional[ProgramsClient] = None
        self._rewards: typing.Optional[RewardsClient] = None

    @property
    def with_raw_response(self) -> RawLoyaltyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawLoyaltyClient
        """
        return self._raw_client

    def search_events(
        self,
        *,
        query: typing.Optional[LoyaltyEventQueryParams] = OMIT,
        limit: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[LoyaltyEvent]:
        """
        Searches for loyalty events.

        A Square loyalty program maintains a ledger of events that occur during the lifetime of a
        buyer's loyalty account. Each change in the point balance
        (for example, points earned, points redeemed, and points expired) is
        recorded in the ledger. Using this endpoint, you can search the ledger for events.

        Search results are sorted by `created_at` in descending order.

        Parameters
        ----------
        query : typing.Optional[LoyaltyEventQueryParams]
            A set of one or more predefined query filters to apply when
            searching for loyalty events. The endpoint performs a logical AND to
            evaluate multiple filters and performs a logical OR on arrays
            that specifies multiple field values.

        limit : typing.Optional[int]
            The maximum number of results to include in the response.
            The last page might contain fewer events.
            The default is 30 events.

        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to this endpoint.
            Provide this to retrieve the next set of results for your original query.
            For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[LoyaltyEvent]
            Success

        Examples
        --------
        from square import Square

        client = Square(
            token="YOUR_TOKEN",
        )
        response = client.loyalty.search_events(
            query={
                "filter": {
                    "order_filter": {"order_id": "PyATxhYLfsMqpVkcKJITPydgEYfZY"}
                }
            },
            limit=30,
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.search_events(query=query, limit=limit, cursor=cursor, request_options=request_options)

    @property
    def accounts(self):
        if self._accounts is None:
            from .accounts.client import AccountsClient  # noqa: E402

            self._accounts = AccountsClient(client_wrapper=self._client_wrapper)
        return self._accounts

    @property
    def programs(self):
        if self._programs is None:
            from .programs.client import ProgramsClient  # noqa: E402

            self._programs = ProgramsClient(client_wrapper=self._client_wrapper)
        return self._programs

    @property
    def rewards(self):
        if self._rewards is None:
            from .rewards.client import RewardsClient  # noqa: E402

            self._rewards = RewardsClient(client_wrapper=self._client_wrapper)
        return self._rewards


class AsyncLoyaltyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawLoyaltyClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._accounts: typing.Optional[AsyncAccountsClient] = None
        self._programs: typing.Optional[AsyncProgramsClient] = None
        self._rewards: typing.Optional[AsyncRewardsClient] = None

    @property
    def with_raw_response(self) -> AsyncRawLoyaltyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawLoyaltyClient
        """
        return self._raw_client

    async def search_events(
        self,
        *,
        query: typing.Optional[LoyaltyEventQueryParams] = OMIT,
        limit: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[LoyaltyEvent]:
        """
        Searches for loyalty events.

        A Square loyalty program maintains a ledger of events that occur during the lifetime of a
        buyer's loyalty account. Each change in the point balance
        (for example, points earned, points redeemed, and points expired) is
        recorded in the ledger. Using this endpoint, you can search the ledger for events.

        Search results are sorted by `created_at` in descending order.

        Parameters
        ----------
        query : typing.Optional[LoyaltyEventQueryParams]
            A set of one or more predefined query filters to apply when
            searching for loyalty events. The endpoint performs a logical AND to
            evaluate multiple filters and performs a logical OR on arrays
            that specifies multiple field values.

        limit : typing.Optional[int]
            The maximum number of results to include in the response.
            The last page might contain fewer events.
            The default is 30 events.

        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to this endpoint.
            Provide this to retrieve the next set of results for your original query.
            For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[LoyaltyEvent]
            Success

        Examples
        --------
        import asyncio

        from square import AsyncSquare

        client = AsyncSquare(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.loyalty.search_events(
                query={
                    "filter": {
                        "order_filter": {"order_id": "PyATxhYLfsMqpVkcKJITPydgEYfZY"}
                    }
                },
                limit=30,
            )
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        return await self._raw_client.search_events(
            query=query, limit=limit, cursor=cursor, request_options=request_options
        )

    @property
    def accounts(self):
        if self._accounts is None:
            from .accounts.client import AsyncAccountsClient  # noqa: E402

            self._accounts = AsyncAccountsClient(client_wrapper=self._client_wrapper)
        return self._accounts

    @property
    def programs(self):
        if self._programs is None:
            from .programs.client import AsyncProgramsClient  # noqa: E402

            self._programs = AsyncProgramsClient(client_wrapper=self._client_wrapper)
        return self._programs

    @property
    def rewards(self):
        if self._rewards is None:
            from .rewards.client import AsyncRewardsClient  # noqa: E402

            self._rewards = AsyncRewardsClient(client_wrapper=self._client_wrapper)
        return self._rewards
