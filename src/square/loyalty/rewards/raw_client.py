# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...requests.loyalty_reward import LoyaltyRewardParams
from ...core.request_options import RequestOptions
from ...core.http_response import HttpResponse
from ...types.create_loyalty_reward_response import CreateLoyaltyRewardResponse
from ...core.serialization import convert_and_respect_annotation_metadata
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...requests.search_loyalty_rewards_request_loyalty_reward_query import (
    SearchLoyaltyRewardsRequestLoyaltyRewardQueryParams,
)
from ...types.search_loyalty_rewards_response import SearchLoyaltyRewardsResponse
from ...types.get_loyalty_reward_response import GetLoyaltyRewardResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...types.delete_loyalty_reward_response import DeleteLoyaltyRewardResponse
from ...types.redeem_loyalty_reward_response import RedeemLoyaltyRewardResponse
from ...core.client_wrapper import AsyncClientWrapper
from ...core.http_response import AsyncHttpResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawRewardsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        reward: LoyaltyRewardParams,
        idempotency_key: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CreateLoyaltyRewardResponse]:
        """
        Creates a loyalty reward. In the process, the endpoint does following:

        - Uses the `reward_tier_id` in the request to determine the number of points
        to lock for this reward.
        - If the request includes `order_id`, it adds the reward and related discount to the order.

        After a reward is created, the points are locked and
        not available for the buyer to redeem another reward.

        Parameters
        ----------
        reward : LoyaltyRewardParams
            The reward to create.

        idempotency_key : str
            A unique string that identifies this `CreateLoyaltyReward` request.
            Keys can be any valid string, but must be unique for every request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CreateLoyaltyRewardResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/loyalty/rewards",
            method="POST",
            json={
                "reward": convert_and_respect_annotation_metadata(
                    object_=reward, annotation=LoyaltyRewardParams, direction="write"
                ),
                "idempotency_key": idempotency_key,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateLoyaltyRewardResponse,
                    construct_type(
                        type_=CreateLoyaltyRewardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        *,
        query: typing.Optional[SearchLoyaltyRewardsRequestLoyaltyRewardQueryParams] = OMIT,
        limit: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SearchLoyaltyRewardsResponse]:
        """
        Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns results for all loyalty accounts.
        If you include a `query` object, `loyalty_account_id` is required and `status` is  optional.

        If you know a reward ID, use the
        [RetrieveLoyaltyReward](api-endpoint:Loyalty-RetrieveLoyaltyReward) endpoint.

        Search results are sorted by `updated_at` in descending order.

        Parameters
        ----------
        query : typing.Optional[SearchLoyaltyRewardsRequestLoyaltyRewardQueryParams]
            The search criteria for the request.
            If empty, the endpoint retrieves all loyalty rewards in the loyalty program.

        limit : typing.Optional[int]
            The maximum number of results to return in the response. The default value is 30.

        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to
            this endpoint. Provide this to retrieve the next set of
            results for the original query.
            For more information,
            see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SearchLoyaltyRewardsResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/loyalty/rewards/search",
            method="POST",
            json={
                "query": convert_and_respect_annotation_metadata(
                    object_=query, annotation=SearchLoyaltyRewardsRequestLoyaltyRewardQueryParams, direction="write"
                ),
                "limit": limit,
                "cursor": cursor,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SearchLoyaltyRewardsResponse,
                    construct_type(
                        type_=SearchLoyaltyRewardsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, reward_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetLoyaltyRewardResponse]:
        """
        Retrieves a loyalty reward.

        Parameters
        ----------
        reward_id : str
            The ID of the [loyalty reward](entity:LoyaltyReward) to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetLoyaltyRewardResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/loyalty/rewards/{jsonable_encoder(reward_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetLoyaltyRewardResponse,
                    construct_type(
                        type_=GetLoyaltyRewardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, reward_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[DeleteLoyaltyRewardResponse]:
        """
        Deletes a loyalty reward by doing the following:

        - Returns the loyalty points back to the loyalty account.
        - If an order ID was specified when the reward was created
        (see [CreateLoyaltyReward](api-endpoint:Loyalty-CreateLoyaltyReward)),
        it updates the order by removing the reward and related
        discounts.

        You cannot delete a reward that has reached the terminal state (REDEEMED).

        Parameters
        ----------
        reward_id : str
            The ID of the [loyalty reward](entity:LoyaltyReward) to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DeleteLoyaltyRewardResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/loyalty/rewards/{jsonable_encoder(reward_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteLoyaltyRewardResponse,
                    construct_type(
                        type_=DeleteLoyaltyRewardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def redeem(
        self,
        reward_id: str,
        *,
        idempotency_key: str,
        location_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[RedeemLoyaltyRewardResponse]:
        """
        Redeems a loyalty reward.

        The endpoint sets the reward to the `REDEEMED` terminal state.

        If you are using your own order processing system (not using the
        Orders API), you call this endpoint after the buyer paid for the
        purchase.

        After the reward reaches the terminal state, it cannot be deleted.
        In other words, points used for the reward cannot be returned
        to the account.

        Parameters
        ----------
        reward_id : str
            The ID of the [loyalty reward](entity:LoyaltyReward) to redeem.

        idempotency_key : str
            A unique string that identifies this `RedeemLoyaltyReward` request.
            Keys can be any valid string, but must be unique for every request.

        location_id : str
            The ID of the [location](entity:Location) where the reward is redeemed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[RedeemLoyaltyRewardResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/loyalty/rewards/{jsonable_encoder(reward_id)}/redeem",
            method="POST",
            json={
                "idempotency_key": idempotency_key,
                "location_id": location_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    RedeemLoyaltyRewardResponse,
                    construct_type(
                        type_=RedeemLoyaltyRewardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawRewardsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        reward: LoyaltyRewardParams,
        idempotency_key: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CreateLoyaltyRewardResponse]:
        """
        Creates a loyalty reward. In the process, the endpoint does following:

        - Uses the `reward_tier_id` in the request to determine the number of points
        to lock for this reward.
        - If the request includes `order_id`, it adds the reward and related discount to the order.

        After a reward is created, the points are locked and
        not available for the buyer to redeem another reward.

        Parameters
        ----------
        reward : LoyaltyRewardParams
            The reward to create.

        idempotency_key : str
            A unique string that identifies this `CreateLoyaltyReward` request.
            Keys can be any valid string, but must be unique for every request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CreateLoyaltyRewardResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/loyalty/rewards",
            method="POST",
            json={
                "reward": convert_and_respect_annotation_metadata(
                    object_=reward, annotation=LoyaltyRewardParams, direction="write"
                ),
                "idempotency_key": idempotency_key,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateLoyaltyRewardResponse,
                    construct_type(
                        type_=CreateLoyaltyRewardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        *,
        query: typing.Optional[SearchLoyaltyRewardsRequestLoyaltyRewardQueryParams] = OMIT,
        limit: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SearchLoyaltyRewardsResponse]:
        """
        Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns results for all loyalty accounts.
        If you include a `query` object, `loyalty_account_id` is required and `status` is  optional.

        If you know a reward ID, use the
        [RetrieveLoyaltyReward](api-endpoint:Loyalty-RetrieveLoyaltyReward) endpoint.

        Search results are sorted by `updated_at` in descending order.

        Parameters
        ----------
        query : typing.Optional[SearchLoyaltyRewardsRequestLoyaltyRewardQueryParams]
            The search criteria for the request.
            If empty, the endpoint retrieves all loyalty rewards in the loyalty program.

        limit : typing.Optional[int]
            The maximum number of results to return in the response. The default value is 30.

        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to
            this endpoint. Provide this to retrieve the next set of
            results for the original query.
            For more information,
            see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SearchLoyaltyRewardsResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/loyalty/rewards/search",
            method="POST",
            json={
                "query": convert_and_respect_annotation_metadata(
                    object_=query, annotation=SearchLoyaltyRewardsRequestLoyaltyRewardQueryParams, direction="write"
                ),
                "limit": limit,
                "cursor": cursor,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SearchLoyaltyRewardsResponse,
                    construct_type(
                        type_=SearchLoyaltyRewardsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, reward_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetLoyaltyRewardResponse]:
        """
        Retrieves a loyalty reward.

        Parameters
        ----------
        reward_id : str
            The ID of the [loyalty reward](entity:LoyaltyReward) to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetLoyaltyRewardResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/loyalty/rewards/{jsonable_encoder(reward_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetLoyaltyRewardResponse,
                    construct_type(
                        type_=GetLoyaltyRewardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, reward_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[DeleteLoyaltyRewardResponse]:
        """
        Deletes a loyalty reward by doing the following:

        - Returns the loyalty points back to the loyalty account.
        - If an order ID was specified when the reward was created
        (see [CreateLoyaltyReward](api-endpoint:Loyalty-CreateLoyaltyReward)),
        it updates the order by removing the reward and related
        discounts.

        You cannot delete a reward that has reached the terminal state (REDEEMED).

        Parameters
        ----------
        reward_id : str
            The ID of the [loyalty reward](entity:LoyaltyReward) to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DeleteLoyaltyRewardResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/loyalty/rewards/{jsonable_encoder(reward_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeleteLoyaltyRewardResponse,
                    construct_type(
                        type_=DeleteLoyaltyRewardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def redeem(
        self,
        reward_id: str,
        *,
        idempotency_key: str,
        location_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[RedeemLoyaltyRewardResponse]:
        """
        Redeems a loyalty reward.

        The endpoint sets the reward to the `REDEEMED` terminal state.

        If you are using your own order processing system (not using the
        Orders API), you call this endpoint after the buyer paid for the
        purchase.

        After the reward reaches the terminal state, it cannot be deleted.
        In other words, points used for the reward cannot be returned
        to the account.

        Parameters
        ----------
        reward_id : str
            The ID of the [loyalty reward](entity:LoyaltyReward) to redeem.

        idempotency_key : str
            A unique string that identifies this `RedeemLoyaltyReward` request.
            Keys can be any valid string, but must be unique for every request.

        location_id : str
            The ID of the [location](entity:Location) where the reward is redeemed.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[RedeemLoyaltyRewardResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/loyalty/rewards/{jsonable_encoder(reward_id)}/redeem",
            method="POST",
            json={
                "idempotency_key": idempotency_key,
                "location_id": location_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    RedeemLoyaltyRewardResponse,
                    construct_type(
                        type_=RedeemLoyaltyRewardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
