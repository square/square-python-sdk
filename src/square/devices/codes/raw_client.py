# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pagination import AsyncPager, BaseHttpResponse, SyncPager
from ...core.request_options import RequestOptions
from ...core.serialization import convert_and_respect_annotation_metadata
from ...core.unchecked_base_model import construct_type
from ...requests.device_code import DeviceCodeParams
from ...types.create_device_code_response import CreateDeviceCodeResponse
from ...types.device_code import DeviceCode
from ...types.device_code_status import DeviceCodeStatus
from ...types.get_device_code_response import GetDeviceCodeResponse
from ...types.list_device_codes_response import ListDeviceCodesResponse
from ...types.product_type import ProductType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawCodesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        product_type: typing.Optional[ProductType] = None,
        status: typing.Optional[DeviceCodeStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[DeviceCode]:
        """
        Lists all DeviceCodes associated with the merchant.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to this endpoint.
            Provide this to retrieve the next set of results for your original query.

            See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.

        location_id : typing.Optional[str]
            If specified, only returns DeviceCodes of the specified location.
            Returns DeviceCodes of all locations if empty.

        product_type : typing.Optional[ProductType]
            If specified, only returns DeviceCodes targeting the specified product type.
            Returns DeviceCodes of all product types if empty.

        status : typing.Optional[DeviceCodeStatus]
            If specified, returns DeviceCodes with the specified statuses.
            Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[DeviceCode]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/devices/codes",
            method="GET",
            params={
                "cursor": cursor,
                "location_id": location_id,
                "product_type": product_type,
                "status": status,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListDeviceCodesResponse,
                    construct_type(
                        type_=ListDeviceCodesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.device_codes
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list(
                    cursor=_parsed_next,
                    location_id=location_id,
                    product_type=product_type,
                    status=status,
                    request_options=request_options,
                )
                return SyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        *,
        idempotency_key: str,
        device_code: DeviceCodeParams,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CreateDeviceCodeResponse]:
        """
        Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected
        terminal mode.

        Parameters
        ----------
        idempotency_key : str
            A unique string that identifies this CreateDeviceCode request. Keys can
            be any valid string but must be unique for every CreateDeviceCode request.

            See [Idempotency keys](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency) for more information.

        device_code : DeviceCodeParams
            The device code to create.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CreateDeviceCodeResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/devices/codes",
            method="POST",
            json={
                "idempotency_key": idempotency_key,
                "device_code": convert_and_respect_annotation_metadata(
                    object_=device_code, annotation=DeviceCodeParams, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateDeviceCodeResponse,
                    construct_type(
                        type_=CreateDeviceCodeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetDeviceCodeResponse]:
        """
        Retrieves DeviceCode with the associated ID.

        Parameters
        ----------
        id : str
            The unique identifier for the device code.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetDeviceCodeResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/devices/codes/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDeviceCodeResponse,
                    construct_type(
                        type_=GetDeviceCodeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawCodesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        product_type: typing.Optional[ProductType] = None,
        status: typing.Optional[DeviceCodeStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[DeviceCode]:
        """
        Lists all DeviceCodes associated with the merchant.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to this endpoint.
            Provide this to retrieve the next set of results for your original query.

            See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.

        location_id : typing.Optional[str]
            If specified, only returns DeviceCodes of the specified location.
            Returns DeviceCodes of all locations if empty.

        product_type : typing.Optional[ProductType]
            If specified, only returns DeviceCodes targeting the specified product type.
            Returns DeviceCodes of all product types if empty.

        status : typing.Optional[DeviceCodeStatus]
            If specified, returns DeviceCodes with the specified statuses.
            Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[DeviceCode]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/devices/codes",
            method="GET",
            params={
                "cursor": cursor,
                "location_id": location_id,
                "product_type": product_type,
                "status": status,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListDeviceCodesResponse,
                    construct_type(
                        type_=ListDeviceCodesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.device_codes
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""

                async def _get_next():
                    return await self.list(
                        cursor=_parsed_next,
                        location_id=location_id,
                        product_type=product_type,
                        status=status,
                        request_options=request_options,
                    )

                return AsyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        *,
        idempotency_key: str,
        device_code: DeviceCodeParams,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CreateDeviceCodeResponse]:
        """
        Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected
        terminal mode.

        Parameters
        ----------
        idempotency_key : str
            A unique string that identifies this CreateDeviceCode request. Keys can
            be any valid string but must be unique for every CreateDeviceCode request.

            See [Idempotency keys](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency) for more information.

        device_code : DeviceCodeParams
            The device code to create.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CreateDeviceCodeResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/devices/codes",
            method="POST",
            json={
                "idempotency_key": idempotency_key,
                "device_code": convert_and_respect_annotation_metadata(
                    object_=device_code, annotation=DeviceCodeParams, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateDeviceCodeResponse,
                    construct_type(
                        type_=CreateDeviceCodeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetDeviceCodeResponse]:
        """
        Retrieves DeviceCode with the associated ID.

        Parameters
        ----------
        id : str
            The unique identifier for the device code.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetDeviceCodeResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/devices/codes/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDeviceCodeResponse,
                    construct_type(
                        type_=GetDeviceCodeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
