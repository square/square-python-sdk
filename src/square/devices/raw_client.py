# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pagination import AsyncPager, BaseHttpResponse, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..types.device import Device
from ..types.get_device_response import GetDeviceResponse
from ..types.list_devices_response import ListDevicesResponse
from ..types.sort_order import SortOrder


class RawDevicesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        sort_order: typing.Optional[SortOrder] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[Device]:
        """
        List devices associated with the merchant. Currently, only Terminal API
        devices are supported.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to this endpoint.
            Provide this cursor to retrieve the next set of results for the original query.
            See [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination) for more information.

        sort_order : typing.Optional[SortOrder]
            The order in which results are listed.
            - `ASC` - Oldest to newest.
            - `DESC` - Newest to oldest (default).

        limit : typing.Optional[int]
            The number of results to return in a single page.

        location_id : typing.Optional[str]
            If present, only returns devices at the target location.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[Device]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/devices",
            method="GET",
            params={
                "cursor": cursor,
                "sort_order": sort_order,
                "limit": limit,
                "location_id": location_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListDevicesResponse,
                    construct_type(
                        type_=ListDevicesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.devices
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list(
                    cursor=_parsed_next,
                    sort_order=sort_order,
                    limit=limit,
                    location_id=location_id,
                    request_options=request_options,
                )
                return SyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self, device_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetDeviceResponse]:
        """
        Retrieves Device with the associated `device_id`.

        Parameters
        ----------
        device_id : str
            The unique ID for the desired `Device`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetDeviceResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/devices/{jsonable_encoder(device_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDeviceResponse,
                    construct_type(
                        type_=GetDeviceResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawDevicesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        sort_order: typing.Optional[SortOrder] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[Device]:
        """
        List devices associated with the merchant. Currently, only Terminal API
        devices are supported.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A pagination cursor returned by a previous call to this endpoint.
            Provide this cursor to retrieve the next set of results for the original query.
            See [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination) for more information.

        sort_order : typing.Optional[SortOrder]
            The order in which results are listed.
            - `ASC` - Oldest to newest.
            - `DESC` - Newest to oldest (default).

        limit : typing.Optional[int]
            The number of results to return in a single page.

        location_id : typing.Optional[str]
            If present, only returns devices at the target location.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[Device]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/devices",
            method="GET",
            params={
                "cursor": cursor,
                "sort_order": sort_order,
                "limit": limit,
                "location_id": location_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListDevicesResponse,
                    construct_type(
                        type_=ListDevicesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _items = _parsed_response.devices
                _parsed_next = _parsed_response.cursor
                _has_next = _parsed_next is not None and _parsed_next != ""

                async def _get_next():
                    return await self.list(
                        cursor=_parsed_next,
                        sort_order=sort_order,
                        limit=limit,
                        location_id=location_id,
                        request_options=request_options,
                    )

                return AsyncPager(
                    has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, device_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetDeviceResponse]:
        """
        Retrieves Device with the associated `device_id`.

        Parameters
        ----------
        device_id : str
            The unique ID for the desired `Device`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetDeviceResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/devices/{jsonable_encoder(device_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetDeviceResponse,
                    construct_type(
                        type_=GetDeviceResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
